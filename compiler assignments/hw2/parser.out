Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    DO
    MULTILINE_COMMENT
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> class_decl program
Rule 2     program -> empty
Rule 3     class_decl -> CLASS ID ( EXTENDS ID ) placeholder1
Rule 4     class_decl -> CLASS ID placeholder1
Rule 5     placeholder1 -> { class_body_decl placeholder2 }
Rule 6     placeholder2 -> class_body_decl placeholder2
Rule 7     placeholder2 -> empty
Rule 8     class_body_decl -> field_decl
Rule 9     class_body_decl -> method_decl
Rule 10    class_body_decl -> constructor_decl
Rule 11    field_decl -> modifier var_decl ;
Rule 12    modifier -> placeholder3 placeholder4
Rule 13    placeholder3 -> PUBLIC
Rule 14    placeholder3 -> PRIVATE
Rule 15    placeholder3 -> empty
Rule 16    placeholder4 -> STATIC
Rule 17    placeholder4 -> empty
Rule 18    var_decl -> type variables
Rule 19    type -> INT
Rule 20    type -> FLOAT
Rule 21    type -> BOOLEAN
Rule 22    type -> ID
Rule 23    variables -> variable placeholder5
Rule 24    placeholder5 -> , variable placeholder5
Rule 25    placeholder5 -> empty
Rule 26    variable -> ID
Rule 27    method_decl -> modifier type ID ( placeholder7 ) block
Rule 28    method_decl -> modifier VOID ID ( placeholder7 ) block
Rule 29    constructor_decl -> modifier ID ( placeholder7 ) block
Rule 30    placeholder7 -> formals
Rule 31    placeholder7 -> empty
Rule 32    formals -> formal_param placeholder8
Rule 33    placeholder8 -> , formal_param placeholder8
Rule 34    placeholder8 -> empty
Rule 35    formal_param -> type variable
Rule 36    block -> { placeholder9 }
Rule 37    placeholder9 -> stmt placeholder9
Rule 38    placeholder9 -> empty
Rule 39    stmt -> openStmt
Rule 40    stmt -> closedStmt
Rule 41    openStmt -> IF ( expr ) stmt
Rule 42    openStmt -> IF ( expr ) closedStmt ELSE openStmt
Rule 43    openStmt -> WHILE ( expr ) openStmt
Rule 44    openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt
Rule 45    closedStmt -> RETURN placeholder12 ;
Rule 46    closedStmt -> stmt_expr ;
Rule 47    closedStmt -> BREAK ;
Rule 48    closedStmt -> CONTINUE ;
Rule 49    closedStmt -> var_decl
Rule 50    closedStmt -> ;
Rule 51    closedStmt -> block
Rule 52    closedStmt -> IF ( expr ) closedStmt ELSE closedStmt
Rule 53    closedStmt -> WHILE ( expr ) closedStmt
Rule 54    closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
Rule 55    placeholder11 -> stmt_expr
Rule 56    placeholder11 -> empty
Rule 57    placeholder12 -> expr
Rule 58    placeholder12 -> empty
Rule 59    literal -> INT_CONST
Rule 60    literal -> FLOAT_CONST
Rule 61    literal -> STRING_CONST
Rule 62    literal -> NULL
Rule 63    literal -> TRUE
Rule 64    literal -> FALSE
Rule 65    primary -> literal
Rule 66    primary -> THIS
Rule 67    primary -> SUPER
Rule 68    primary -> ( expr )
Rule 69    primary -> NEW ID ( placeholder14 )
Rule 70    primary -> lhs
Rule 71    primary -> method_invocation
Rule 72    placeholder14 -> arguments
Rule 73    placeholder14 -> empty
Rule 74    arguments -> expr placeholder15
Rule 75    placeholder15 -> , expr placeholder15
Rule 76    placeholder15 -> empty
Rule 77    lhs -> field_access
Rule 78    field_access -> primary . ID
Rule 79    field_access -> ID
Rule 80    method_invocation -> field_access ( placeholder14 )
Rule 81    expr -> assign
Rule 82    expr -> p1
Rule 83    assign -> lhs = expr
Rule 84    assign -> lhs PLUS_PLUS
Rule 85    assign -> PLUS_PLUS lhs
Rule 86    assign -> lhs MINUS_MINUS
Rule 87    assign -> MINUS_MINUS lhs
Rule 88    p1 -> p1 BOOL_OR p2
Rule 89    p1 -> p2
Rule 90    p2 -> p2 BOOL_AND p3
Rule 91    p2 -> p3
Rule 92    p3 -> p3 EQUAL p4
Rule 93    p3 -> p3 NOT_EQUAL p4
Rule 94    p3 -> p4
Rule 95    p4 -> p4 < p5
Rule 96    p4 -> p4 > p5
Rule 97    p4 -> p4 LESS_THAN_OR_EQUAL p5
Rule 98    p4 -> p4 GREATER_THAN_OR_EQUAL p5
Rule 99    p4 -> p5
Rule 100   p5 -> p5 + p6
Rule 101   p5 -> p5 - p6
Rule 102   p5 -> p6
Rule 103   p6 -> p6 * p7
Rule 104   p6 -> p6 / p7
Rule 105   p6 -> p7
Rule 106   p7 -> ! p7
Rule 107   p7 -> + p7
Rule 108   p7 -> - p7
Rule 109   p7 -> primary
Rule 110   stmt_expr -> assign
Rule 111   stmt_expr -> method_invocation
Rule 112   empty -> <empty>

Terminals, with rules where they appear

!                    : 106
(                    : 3 27 28 29 41 42 43 44 52 53 54 68 69 80
)                    : 3 27 28 29 41 42 43 44 52 53 54 68 69 80
*                    : 103
+                    : 100 107
,                    : 24 33 75
-                    : 101 108
.                    : 78
/                    : 104
;                    : 11 44 44 45 46 47 48 50 54 54
<                    : 95
=                    : 83
>                    : 96
BOOLEAN              : 21
BOOL_AND             : 90
BOOL_OR              : 88
BREAK                : 47
CLASS                : 3 4
COMMENT              : 
CONTINUE             : 48
DO                   : 
ELSE                 : 42 52
EQUAL                : 92
EXTENDS              : 3
FALSE                : 64
FLOAT                : 20
FLOAT_CONST          : 60
FOR                  : 44 54
GREATER_THAN_OR_EQUAL : 98
ID                   : 3 3 4 22 26 27 28 29 69 78 79
IF                   : 41 42 52
INT                  : 19
INT_CONST            : 59
LESS_THAN_OR_EQUAL   : 97
MINUS_MINUS          : 86 87
MULTILINE_COMMENT    : 
NEW                  : 69
NOT_EQUAL            : 93
NULL                 : 62
PLUS_PLUS            : 84 85
PRIVATE              : 14
PUBLIC               : 13
RETURN               : 45
STATIC               : 16
STRING_CONST         : 61
SUPER                : 67
THIS                 : 66
TRUE                 : 63
VOID                 : 28
WHILE                : 43 53
error                : 
{                    : 5 36
}                    : 5 36

Nonterminals, with rules where they appear

arguments            : 72
assign               : 81 110
block                : 27 28 29 51
class_body_decl      : 5 6
class_decl           : 1
closedStmt           : 40 42 52 52 53 54
constructor_decl     : 10
empty                : 2 7 15 17 25 31 34 38 56 58 73 76
expr                 : 41 42 43 52 53 57 68 74 75 83
field_access         : 77 80
field_decl           : 8
formal_param         : 32 33
formals              : 30
lhs                  : 70 83 84 85 86 87
literal              : 65
method_decl          : 9
method_invocation    : 71 111
modifier             : 11 27 28 29
openStmt             : 39 42 43 44
p1                   : 82 88
p2                   : 88 89 90
p3                   : 90 91 92 93
p4                   : 92 93 94 95 96 97 98
p5                   : 95 96 97 98 99 100 101
p6                   : 100 101 102 103 104
p7                   : 103 104 105 106 107 108
placeholder1         : 3 4
placeholder11        : 44 44 54 54
placeholder12        : 44 45 54
placeholder14        : 69 80
placeholder15        : 74 75
placeholder2         : 5 6
placeholder3         : 12
placeholder4         : 12
placeholder5         : 23 24
placeholder7         : 27 28 29
placeholder8         : 32 33
placeholder9         : 36 37
primary              : 78 109
program              : 1 0
stmt                 : 37 41
stmt_expr            : 46 55
type                 : 18 27 35
var_decl             : 11 49
variable             : 23 24 35
variables            : 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . class_decl program
    (2) program -> . empty
    (3) class_decl -> . CLASS ID ( EXTENDS ID ) placeholder1
    (4) class_decl -> . CLASS ID placeholder1
    (112) empty -> .

    CLASS           shift and go to state 1
    $end            reduce using rule 112 (empty -> .)

    program                        shift and go to state 2
    class_decl                     shift and go to state 3
    empty                          shift and go to state 4

state 1

    (3) class_decl -> CLASS . ID ( EXTENDS ID ) placeholder1
    (4) class_decl -> CLASS . ID placeholder1

    ID              shift and go to state 5


state 2

    (0) S' -> program .



state 3

    (1) program -> class_decl . program
    (1) program -> . class_decl program
    (2) program -> . empty
    (3) class_decl -> . CLASS ID ( EXTENDS ID ) placeholder1
    (4) class_decl -> . CLASS ID placeholder1
    (112) empty -> .

    CLASS           shift and go to state 1
    $end            reduce using rule 112 (empty -> .)

    program                        shift and go to state 6
    class_decl                     shift and go to state 3
    empty                          shift and go to state 4

state 4

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)


state 5

    (3) class_decl -> CLASS ID . ( EXTENDS ID ) placeholder1
    (4) class_decl -> CLASS ID . placeholder1
    (5) placeholder1 -> . { class_body_decl placeholder2 }

    (               shift and go to state 7
    {               shift and go to state 9

    placeholder1                   shift and go to state 8

state 6

    (1) program -> class_decl program .

    $end            reduce using rule 1 (program -> class_decl program .)


state 7

    (3) class_decl -> CLASS ID ( . EXTENDS ID ) placeholder1

    EXTENDS         shift and go to state 10


state 8

    (4) class_decl -> CLASS ID placeholder1 .

    CLASS           reduce using rule 4 (class_decl -> CLASS ID placeholder1 .)
    $end            reduce using rule 4 (class_decl -> CLASS ID placeholder1 .)


state 9

    (5) placeholder1 -> { . class_body_decl placeholder2 }
    (8) class_body_decl -> . field_decl
    (9) class_body_decl -> . method_decl
    (10) class_body_decl -> . constructor_decl
    (11) field_decl -> . modifier var_decl ;
    (27) method_decl -> . modifier type ID ( placeholder7 ) block
    (28) method_decl -> . modifier VOID ID ( placeholder7 ) block
    (29) constructor_decl -> . modifier ID ( placeholder7 ) block
    (12) modifier -> . placeholder3 placeholder4
    (13) placeholder3 -> . PUBLIC
    (14) placeholder3 -> . PRIVATE
    (15) placeholder3 -> . empty
    (112) empty -> .

    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 13
    STATIC          reduce using rule 112 (empty -> .)
    VOID            reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    INT             reduce using rule 112 (empty -> .)
    FLOAT           reduce using rule 112 (empty -> .)
    BOOLEAN         reduce using rule 112 (empty -> .)

    class_body_decl                shift and go to state 12
    field_decl                     shift and go to state 15
    constructor_decl               shift and go to state 11
    method_decl                    shift and go to state 16
    empty                          shift and go to state 14
    placeholder3                   shift and go to state 17
    modifier                       shift and go to state 18

state 10

    (3) class_decl -> CLASS ID ( EXTENDS . ID ) placeholder1

    ID              shift and go to state 20


state 11

    (10) class_body_decl -> constructor_decl .

    PUBLIC          reduce using rule 10 (class_body_decl -> constructor_decl .)
    PRIVATE         reduce using rule 10 (class_body_decl -> constructor_decl .)
    VOID            reduce using rule 10 (class_body_decl -> constructor_decl .)
    ID              reduce using rule 10 (class_body_decl -> constructor_decl .)
    INT             reduce using rule 10 (class_body_decl -> constructor_decl .)
    FLOAT           reduce using rule 10 (class_body_decl -> constructor_decl .)
    BOOLEAN         reduce using rule 10 (class_body_decl -> constructor_decl .)
    STATIC          reduce using rule 10 (class_body_decl -> constructor_decl .)
    }               reduce using rule 10 (class_body_decl -> constructor_decl .)


state 12

    (5) placeholder1 -> { class_body_decl . placeholder2 }
    (6) placeholder2 -> . class_body_decl placeholder2
    (7) placeholder2 -> . empty
    (8) class_body_decl -> . field_decl
    (9) class_body_decl -> . method_decl
    (10) class_body_decl -> . constructor_decl
    (112) empty -> .
    (11) field_decl -> . modifier var_decl ;
    (27) method_decl -> . modifier type ID ( placeholder7 ) block
    (28) method_decl -> . modifier VOID ID ( placeholder7 ) block
    (29) constructor_decl -> . modifier ID ( placeholder7 ) block
    (12) modifier -> . placeholder3 placeholder4
    (13) placeholder3 -> . PUBLIC
    (14) placeholder3 -> . PRIVATE
    (15) placeholder3 -> . empty

    }               reduce using rule 112 (empty -> .)
    STATIC          reduce using rule 112 (empty -> .)
    VOID            reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    INT             reduce using rule 112 (empty -> .)
    FLOAT           reduce using rule 112 (empty -> .)
    BOOLEAN         reduce using rule 112 (empty -> .)
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 13

    modifier                       shift and go to state 18
    class_body_decl                shift and go to state 21
    field_decl                     shift and go to state 15
    constructor_decl               shift and go to state 11
    method_decl                    shift and go to state 16
    placeholder3                   shift and go to state 17
    placeholder2                   shift and go to state 23
    empty                          shift and go to state 22

state 13

    (14) placeholder3 -> PRIVATE .

    STATIC          reduce using rule 14 (placeholder3 -> PRIVATE .)
    VOID            reduce using rule 14 (placeholder3 -> PRIVATE .)
    ID              reduce using rule 14 (placeholder3 -> PRIVATE .)
    INT             reduce using rule 14 (placeholder3 -> PRIVATE .)
    FLOAT           reduce using rule 14 (placeholder3 -> PRIVATE .)
    BOOLEAN         reduce using rule 14 (placeholder3 -> PRIVATE .)


state 14

    (15) placeholder3 -> empty .

    STATIC          reduce using rule 15 (placeholder3 -> empty .)
    VOID            reduce using rule 15 (placeholder3 -> empty .)
    ID              reduce using rule 15 (placeholder3 -> empty .)
    INT             reduce using rule 15 (placeholder3 -> empty .)
    FLOAT           reduce using rule 15 (placeholder3 -> empty .)
    BOOLEAN         reduce using rule 15 (placeholder3 -> empty .)


state 15

    (8) class_body_decl -> field_decl .

    PUBLIC          reduce using rule 8 (class_body_decl -> field_decl .)
    PRIVATE         reduce using rule 8 (class_body_decl -> field_decl .)
    VOID            reduce using rule 8 (class_body_decl -> field_decl .)
    ID              reduce using rule 8 (class_body_decl -> field_decl .)
    INT             reduce using rule 8 (class_body_decl -> field_decl .)
    FLOAT           reduce using rule 8 (class_body_decl -> field_decl .)
    BOOLEAN         reduce using rule 8 (class_body_decl -> field_decl .)
    STATIC          reduce using rule 8 (class_body_decl -> field_decl .)
    }               reduce using rule 8 (class_body_decl -> field_decl .)


state 16

    (9) class_body_decl -> method_decl .

    PUBLIC          reduce using rule 9 (class_body_decl -> method_decl .)
    PRIVATE         reduce using rule 9 (class_body_decl -> method_decl .)
    VOID            reduce using rule 9 (class_body_decl -> method_decl .)
    ID              reduce using rule 9 (class_body_decl -> method_decl .)
    INT             reduce using rule 9 (class_body_decl -> method_decl .)
    FLOAT           reduce using rule 9 (class_body_decl -> method_decl .)
    BOOLEAN         reduce using rule 9 (class_body_decl -> method_decl .)
    STATIC          reduce using rule 9 (class_body_decl -> method_decl .)
    }               reduce using rule 9 (class_body_decl -> method_decl .)


state 17

    (12) modifier -> placeholder3 . placeholder4
    (16) placeholder4 -> . STATIC
    (17) placeholder4 -> . empty
    (112) empty -> .

    STATIC          shift and go to state 24
    VOID            reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    INT             reduce using rule 112 (empty -> .)
    FLOAT           reduce using rule 112 (empty -> .)
    BOOLEAN         reduce using rule 112 (empty -> .)

    placeholder4                   shift and go to state 25
    empty                          shift and go to state 26

state 18

    (11) field_decl -> modifier . var_decl ;
    (27) method_decl -> modifier . type ID ( placeholder7 ) block
    (28) method_decl -> modifier . VOID ID ( placeholder7 ) block
    (29) constructor_decl -> modifier . ID ( placeholder7 ) block
    (18) var_decl -> . type variables
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID

    VOID            shift and go to state 27
    ID              shift and go to state 33
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31

    var_decl                       shift and go to state 29
    type                           shift and go to state 32

state 19

    (13) placeholder3 -> PUBLIC .

    STATIC          reduce using rule 13 (placeholder3 -> PUBLIC .)
    VOID            reduce using rule 13 (placeholder3 -> PUBLIC .)
    ID              reduce using rule 13 (placeholder3 -> PUBLIC .)
    INT             reduce using rule 13 (placeholder3 -> PUBLIC .)
    FLOAT           reduce using rule 13 (placeholder3 -> PUBLIC .)
    BOOLEAN         reduce using rule 13 (placeholder3 -> PUBLIC .)


state 20

    (3) class_decl -> CLASS ID ( EXTENDS ID . ) placeholder1

    )               shift and go to state 34


state 21

    (6) placeholder2 -> class_body_decl . placeholder2
    (6) placeholder2 -> . class_body_decl placeholder2
    (7) placeholder2 -> . empty
    (8) class_body_decl -> . field_decl
    (9) class_body_decl -> . method_decl
    (10) class_body_decl -> . constructor_decl
    (112) empty -> .
    (11) field_decl -> . modifier var_decl ;
    (27) method_decl -> . modifier type ID ( placeholder7 ) block
    (28) method_decl -> . modifier VOID ID ( placeholder7 ) block
    (29) constructor_decl -> . modifier ID ( placeholder7 ) block
    (12) modifier -> . placeholder3 placeholder4
    (13) placeholder3 -> . PUBLIC
    (14) placeholder3 -> . PRIVATE
    (15) placeholder3 -> . empty

    }               reduce using rule 112 (empty -> .)
    STATIC          reduce using rule 112 (empty -> .)
    VOID            reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    INT             reduce using rule 112 (empty -> .)
    FLOAT           reduce using rule 112 (empty -> .)
    BOOLEAN         reduce using rule 112 (empty -> .)
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 13

    modifier                       shift and go to state 18
    class_body_decl                shift and go to state 21
    field_decl                     shift and go to state 15
    constructor_decl               shift and go to state 11
    method_decl                    shift and go to state 16
    placeholder3                   shift and go to state 17
    placeholder2                   shift and go to state 35
    empty                          shift and go to state 22

state 22

    (7) placeholder2 -> empty .
    (15) placeholder3 -> empty .

    }               reduce using rule 7 (placeholder2 -> empty .)
    STATIC          reduce using rule 15 (placeholder3 -> empty .)
    VOID            reduce using rule 15 (placeholder3 -> empty .)
    ID              reduce using rule 15 (placeholder3 -> empty .)
    INT             reduce using rule 15 (placeholder3 -> empty .)
    FLOAT           reduce using rule 15 (placeholder3 -> empty .)
    BOOLEAN         reduce using rule 15 (placeholder3 -> empty .)


state 23

    (5) placeholder1 -> { class_body_decl placeholder2 . }

    }               shift and go to state 36


state 24

    (16) placeholder4 -> STATIC .

    VOID            reduce using rule 16 (placeholder4 -> STATIC .)
    ID              reduce using rule 16 (placeholder4 -> STATIC .)
    INT             reduce using rule 16 (placeholder4 -> STATIC .)
    FLOAT           reduce using rule 16 (placeholder4 -> STATIC .)
    BOOLEAN         reduce using rule 16 (placeholder4 -> STATIC .)


state 25

    (12) modifier -> placeholder3 placeholder4 .

    VOID            reduce using rule 12 (modifier -> placeholder3 placeholder4 .)
    ID              reduce using rule 12 (modifier -> placeholder3 placeholder4 .)
    INT             reduce using rule 12 (modifier -> placeholder3 placeholder4 .)
    FLOAT           reduce using rule 12 (modifier -> placeholder3 placeholder4 .)
    BOOLEAN         reduce using rule 12 (modifier -> placeholder3 placeholder4 .)


state 26

    (17) placeholder4 -> empty .

    VOID            reduce using rule 17 (placeholder4 -> empty .)
    ID              reduce using rule 17 (placeholder4 -> empty .)
    INT             reduce using rule 17 (placeholder4 -> empty .)
    FLOAT           reduce using rule 17 (placeholder4 -> empty .)
    BOOLEAN         reduce using rule 17 (placeholder4 -> empty .)


state 27

    (28) method_decl -> modifier VOID . ID ( placeholder7 ) block

    ID              shift and go to state 37


state 28

    (20) type -> FLOAT .

    ID              reduce using rule 20 (type -> FLOAT .)


state 29

    (11) field_decl -> modifier var_decl . ;

    ;               shift and go to state 38


state 30

    (19) type -> INT .

    ID              reduce using rule 19 (type -> INT .)


state 31

    (21) type -> BOOLEAN .

    ID              reduce using rule 21 (type -> BOOLEAN .)


state 32

    (27) method_decl -> modifier type . ID ( placeholder7 ) block
    (18) var_decl -> type . variables
    (23) variables -> . variable placeholder5
    (26) variable -> . ID

    ID              shift and go to state 41

    variables                      shift and go to state 39
    variable                       shift and go to state 40

state 33

    (29) constructor_decl -> modifier ID . ( placeholder7 ) block
    (22) type -> ID .

    (               shift and go to state 42
    ID              reduce using rule 22 (type -> ID .)


state 34

    (3) class_decl -> CLASS ID ( EXTENDS ID ) . placeholder1
    (5) placeholder1 -> . { class_body_decl placeholder2 }

    {               shift and go to state 9

    placeholder1                   shift and go to state 43

state 35

    (6) placeholder2 -> class_body_decl placeholder2 .

    }               reduce using rule 6 (placeholder2 -> class_body_decl placeholder2 .)


state 36

    (5) placeholder1 -> { class_body_decl placeholder2 } .

    CLASS           reduce using rule 5 (placeholder1 -> { class_body_decl placeholder2 } .)
    $end            reduce using rule 5 (placeholder1 -> { class_body_decl placeholder2 } .)


state 37

    (28) method_decl -> modifier VOID ID . ( placeholder7 ) block

    (               shift and go to state 44


state 38

    (11) field_decl -> modifier var_decl ; .

    PUBLIC          reduce using rule 11 (field_decl -> modifier var_decl ; .)
    PRIVATE         reduce using rule 11 (field_decl -> modifier var_decl ; .)
    VOID            reduce using rule 11 (field_decl -> modifier var_decl ; .)
    ID              reduce using rule 11 (field_decl -> modifier var_decl ; .)
    INT             reduce using rule 11 (field_decl -> modifier var_decl ; .)
    FLOAT           reduce using rule 11 (field_decl -> modifier var_decl ; .)
    BOOLEAN         reduce using rule 11 (field_decl -> modifier var_decl ; .)
    STATIC          reduce using rule 11 (field_decl -> modifier var_decl ; .)
    }               reduce using rule 11 (field_decl -> modifier var_decl ; .)


state 39

    (18) var_decl -> type variables .

    ELSE            reduce using rule 18 (var_decl -> type variables .)
    IF              reduce using rule 18 (var_decl -> type variables .)
    WHILE           reduce using rule 18 (var_decl -> type variables .)
    FOR             reduce using rule 18 (var_decl -> type variables .)
    RETURN          reduce using rule 18 (var_decl -> type variables .)
    BREAK           reduce using rule 18 (var_decl -> type variables .)
    CONTINUE        reduce using rule 18 (var_decl -> type variables .)
    ;               reduce using rule 18 (var_decl -> type variables .)
    {               reduce using rule 18 (var_decl -> type variables .)
    PLUS_PLUS       reduce using rule 18 (var_decl -> type variables .)
    MINUS_MINUS     reduce using rule 18 (var_decl -> type variables .)
    INT             reduce using rule 18 (var_decl -> type variables .)
    FLOAT           reduce using rule 18 (var_decl -> type variables .)
    BOOLEAN         reduce using rule 18 (var_decl -> type variables .)
    ID              reduce using rule 18 (var_decl -> type variables .)
    THIS            reduce using rule 18 (var_decl -> type variables .)
    SUPER           reduce using rule 18 (var_decl -> type variables .)
    (               reduce using rule 18 (var_decl -> type variables .)
    NEW             reduce using rule 18 (var_decl -> type variables .)
    INT_CONST       reduce using rule 18 (var_decl -> type variables .)
    FLOAT_CONST     reduce using rule 18 (var_decl -> type variables .)
    STRING_CONST    reduce using rule 18 (var_decl -> type variables .)
    NULL            reduce using rule 18 (var_decl -> type variables .)
    TRUE            reduce using rule 18 (var_decl -> type variables .)
    FALSE           reduce using rule 18 (var_decl -> type variables .)
    }               reduce using rule 18 (var_decl -> type variables .)


state 40

    (23) variables -> variable . placeholder5
    (24) placeholder5 -> . , variable placeholder5
    (25) placeholder5 -> . empty
    (112) empty -> .

    ,               shift and go to state 46
    ;               reduce using rule 112 (empty -> .)
    IF              reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    FOR             reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    BREAK           reduce using rule 112 (empty -> .)
    CONTINUE        reduce using rule 112 (empty -> .)
    {               reduce using rule 112 (empty -> .)
    PLUS_PLUS       reduce using rule 112 (empty -> .)
    MINUS_MINUS     reduce using rule 112 (empty -> .)
    INT             reduce using rule 112 (empty -> .)
    FLOAT           reduce using rule 112 (empty -> .)
    BOOLEAN         reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    THIS            reduce using rule 112 (empty -> .)
    SUPER           reduce using rule 112 (empty -> .)
    (               reduce using rule 112 (empty -> .)
    NEW             reduce using rule 112 (empty -> .)
    INT_CONST       reduce using rule 112 (empty -> .)
    FLOAT_CONST     reduce using rule 112 (empty -> .)
    STRING_CONST    reduce using rule 112 (empty -> .)
    NULL            reduce using rule 112 (empty -> .)
    TRUE            reduce using rule 112 (empty -> .)
    FALSE           reduce using rule 112 (empty -> .)
    }               reduce using rule 112 (empty -> .)
    ELSE            reduce using rule 112 (empty -> .)

    placeholder5                   shift and go to state 45
    empty                          shift and go to state 47

state 41

    (27) method_decl -> modifier type ID . ( placeholder7 ) block
    (26) variable -> ID .

    (               shift and go to state 48
    ,               reduce using rule 26 (variable -> ID .)
    ;               reduce using rule 26 (variable -> ID .)


state 42

    (29) constructor_decl -> modifier ID ( . placeholder7 ) block
    (30) placeholder7 -> . formals
    (31) placeholder7 -> . empty
    (32) formals -> . formal_param placeholder8
    (112) empty -> .
    (35) formal_param -> . type variable
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID

    )               reduce using rule 112 (empty -> .)
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 53

    formal_param                   shift and go to state 49
    type                           shift and go to state 52
    placeholder7                   shift and go to state 51
    empty                          shift and go to state 50
    formals                        shift and go to state 54

state 43

    (3) class_decl -> CLASS ID ( EXTENDS ID ) placeholder1 .

    CLASS           reduce using rule 3 (class_decl -> CLASS ID ( EXTENDS ID ) placeholder1 .)
    $end            reduce using rule 3 (class_decl -> CLASS ID ( EXTENDS ID ) placeholder1 .)


state 44

    (28) method_decl -> modifier VOID ID ( . placeholder7 ) block
    (30) placeholder7 -> . formals
    (31) placeholder7 -> . empty
    (32) formals -> . formal_param placeholder8
    (112) empty -> .
    (35) formal_param -> . type variable
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID

    )               reduce using rule 112 (empty -> .)
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 53

    formal_param                   shift and go to state 49
    type                           shift and go to state 52
    placeholder7                   shift and go to state 55
    empty                          shift and go to state 50
    formals                        shift and go to state 54

state 45

    (23) variables -> variable placeholder5 .

    ;               reduce using rule 23 (variables -> variable placeholder5 .)
    IF              reduce using rule 23 (variables -> variable placeholder5 .)
    WHILE           reduce using rule 23 (variables -> variable placeholder5 .)
    FOR             reduce using rule 23 (variables -> variable placeholder5 .)
    RETURN          reduce using rule 23 (variables -> variable placeholder5 .)
    BREAK           reduce using rule 23 (variables -> variable placeholder5 .)
    CONTINUE        reduce using rule 23 (variables -> variable placeholder5 .)
    {               reduce using rule 23 (variables -> variable placeholder5 .)
    PLUS_PLUS       reduce using rule 23 (variables -> variable placeholder5 .)
    MINUS_MINUS     reduce using rule 23 (variables -> variable placeholder5 .)
    INT             reduce using rule 23 (variables -> variable placeholder5 .)
    FLOAT           reduce using rule 23 (variables -> variable placeholder5 .)
    BOOLEAN         reduce using rule 23 (variables -> variable placeholder5 .)
    ID              reduce using rule 23 (variables -> variable placeholder5 .)
    THIS            reduce using rule 23 (variables -> variable placeholder5 .)
    SUPER           reduce using rule 23 (variables -> variable placeholder5 .)
    (               reduce using rule 23 (variables -> variable placeholder5 .)
    NEW             reduce using rule 23 (variables -> variable placeholder5 .)
    INT_CONST       reduce using rule 23 (variables -> variable placeholder5 .)
    FLOAT_CONST     reduce using rule 23 (variables -> variable placeholder5 .)
    STRING_CONST    reduce using rule 23 (variables -> variable placeholder5 .)
    NULL            reduce using rule 23 (variables -> variable placeholder5 .)
    TRUE            reduce using rule 23 (variables -> variable placeholder5 .)
    FALSE           reduce using rule 23 (variables -> variable placeholder5 .)
    }               reduce using rule 23 (variables -> variable placeholder5 .)
    ELSE            reduce using rule 23 (variables -> variable placeholder5 .)


state 46

    (24) placeholder5 -> , . variable placeholder5
    (26) variable -> . ID

    ID              shift and go to state 57

    variable                       shift and go to state 56

state 47

    (25) placeholder5 -> empty .

    ;               reduce using rule 25 (placeholder5 -> empty .)
    IF              reduce using rule 25 (placeholder5 -> empty .)
    WHILE           reduce using rule 25 (placeholder5 -> empty .)
    FOR             reduce using rule 25 (placeholder5 -> empty .)
    RETURN          reduce using rule 25 (placeholder5 -> empty .)
    BREAK           reduce using rule 25 (placeholder5 -> empty .)
    CONTINUE        reduce using rule 25 (placeholder5 -> empty .)
    {               reduce using rule 25 (placeholder5 -> empty .)
    PLUS_PLUS       reduce using rule 25 (placeholder5 -> empty .)
    MINUS_MINUS     reduce using rule 25 (placeholder5 -> empty .)
    INT             reduce using rule 25 (placeholder5 -> empty .)
    FLOAT           reduce using rule 25 (placeholder5 -> empty .)
    BOOLEAN         reduce using rule 25 (placeholder5 -> empty .)
    ID              reduce using rule 25 (placeholder5 -> empty .)
    THIS            reduce using rule 25 (placeholder5 -> empty .)
    SUPER           reduce using rule 25 (placeholder5 -> empty .)
    (               reduce using rule 25 (placeholder5 -> empty .)
    NEW             reduce using rule 25 (placeholder5 -> empty .)
    INT_CONST       reduce using rule 25 (placeholder5 -> empty .)
    FLOAT_CONST     reduce using rule 25 (placeholder5 -> empty .)
    STRING_CONST    reduce using rule 25 (placeholder5 -> empty .)
    NULL            reduce using rule 25 (placeholder5 -> empty .)
    TRUE            reduce using rule 25 (placeholder5 -> empty .)
    FALSE           reduce using rule 25 (placeholder5 -> empty .)
    }               reduce using rule 25 (placeholder5 -> empty .)
    ELSE            reduce using rule 25 (placeholder5 -> empty .)


state 48

    (27) method_decl -> modifier type ID ( . placeholder7 ) block
    (30) placeholder7 -> . formals
    (31) placeholder7 -> . empty
    (32) formals -> . formal_param placeholder8
    (112) empty -> .
    (35) formal_param -> . type variable
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID

    )               reduce using rule 112 (empty -> .)
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 53

    formal_param                   shift and go to state 49
    type                           shift and go to state 52
    placeholder7                   shift and go to state 58
    empty                          shift and go to state 50
    formals                        shift and go to state 54

state 49

    (32) formals -> formal_param . placeholder8
    (33) placeholder8 -> . , formal_param placeholder8
    (34) placeholder8 -> . empty
    (112) empty -> .

    ,               shift and go to state 60
    )               reduce using rule 112 (empty -> .)

    placeholder8                   shift and go to state 59
    empty                          shift and go to state 61

state 50

    (31) placeholder7 -> empty .

    )               reduce using rule 31 (placeholder7 -> empty .)


state 51

    (29) constructor_decl -> modifier ID ( placeholder7 . ) block

    )               shift and go to state 62


state 52

    (35) formal_param -> type . variable
    (26) variable -> . ID

    ID              shift and go to state 57

    variable                       shift and go to state 63

state 53

    (22) type -> ID .

    ID              reduce using rule 22 (type -> ID .)


state 54

    (30) placeholder7 -> formals .

    )               reduce using rule 30 (placeholder7 -> formals .)


state 55

    (28) method_decl -> modifier VOID ID ( placeholder7 . ) block

    )               shift and go to state 64


state 56

    (24) placeholder5 -> , variable . placeholder5
    (24) placeholder5 -> . , variable placeholder5
    (25) placeholder5 -> . empty
    (112) empty -> .

    ,               shift and go to state 46
    ;               reduce using rule 112 (empty -> .)
    IF              reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    FOR             reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    BREAK           reduce using rule 112 (empty -> .)
    CONTINUE        reduce using rule 112 (empty -> .)
    {               reduce using rule 112 (empty -> .)
    PLUS_PLUS       reduce using rule 112 (empty -> .)
    MINUS_MINUS     reduce using rule 112 (empty -> .)
    INT             reduce using rule 112 (empty -> .)
    FLOAT           reduce using rule 112 (empty -> .)
    BOOLEAN         reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    THIS            reduce using rule 112 (empty -> .)
    SUPER           reduce using rule 112 (empty -> .)
    (               reduce using rule 112 (empty -> .)
    NEW             reduce using rule 112 (empty -> .)
    INT_CONST       reduce using rule 112 (empty -> .)
    FLOAT_CONST     reduce using rule 112 (empty -> .)
    STRING_CONST    reduce using rule 112 (empty -> .)
    NULL            reduce using rule 112 (empty -> .)
    TRUE            reduce using rule 112 (empty -> .)
    FALSE           reduce using rule 112 (empty -> .)
    }               reduce using rule 112 (empty -> .)
    ELSE            reduce using rule 112 (empty -> .)

    placeholder5                   shift and go to state 65
    empty                          shift and go to state 47

state 57

    (26) variable -> ID .

    ,               reduce using rule 26 (variable -> ID .)
    IF              reduce using rule 26 (variable -> ID .)
    WHILE           reduce using rule 26 (variable -> ID .)
    FOR             reduce using rule 26 (variable -> ID .)
    RETURN          reduce using rule 26 (variable -> ID .)
    BREAK           reduce using rule 26 (variable -> ID .)
    CONTINUE        reduce using rule 26 (variable -> ID .)
    ;               reduce using rule 26 (variable -> ID .)
    {               reduce using rule 26 (variable -> ID .)
    PLUS_PLUS       reduce using rule 26 (variable -> ID .)
    MINUS_MINUS     reduce using rule 26 (variable -> ID .)
    INT             reduce using rule 26 (variable -> ID .)
    FLOAT           reduce using rule 26 (variable -> ID .)
    BOOLEAN         reduce using rule 26 (variable -> ID .)
    ID              reduce using rule 26 (variable -> ID .)
    THIS            reduce using rule 26 (variable -> ID .)
    SUPER           reduce using rule 26 (variable -> ID .)
    (               reduce using rule 26 (variable -> ID .)
    NEW             reduce using rule 26 (variable -> ID .)
    INT_CONST       reduce using rule 26 (variable -> ID .)
    FLOAT_CONST     reduce using rule 26 (variable -> ID .)
    STRING_CONST    reduce using rule 26 (variable -> ID .)
    NULL            reduce using rule 26 (variable -> ID .)
    TRUE            reduce using rule 26 (variable -> ID .)
    FALSE           reduce using rule 26 (variable -> ID .)
    }               reduce using rule 26 (variable -> ID .)
    ELSE            reduce using rule 26 (variable -> ID .)
    )               reduce using rule 26 (variable -> ID .)


state 58

    (27) method_decl -> modifier type ID ( placeholder7 . ) block

    )               shift and go to state 66


state 59

    (32) formals -> formal_param placeholder8 .

    )               reduce using rule 32 (formals -> formal_param placeholder8 .)


state 60

    (33) placeholder8 -> , . formal_param placeholder8
    (35) formal_param -> . type variable
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID

    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 53

    formal_param                   shift and go to state 67
    type                           shift and go to state 52

state 61

    (34) placeholder8 -> empty .

    )               reduce using rule 34 (placeholder8 -> empty .)


state 62

    (29) constructor_decl -> modifier ID ( placeholder7 ) . block
    (36) block -> . { placeholder9 }

    {               shift and go to state 68

    block                          shift and go to state 69

state 63

    (35) formal_param -> type variable .

    ,               reduce using rule 35 (formal_param -> type variable .)
    )               reduce using rule 35 (formal_param -> type variable .)


state 64

    (28) method_decl -> modifier VOID ID ( placeholder7 ) . block
    (36) block -> . { placeholder9 }

    {               shift and go to state 68

    block                          shift and go to state 70

state 65

    (24) placeholder5 -> , variable placeholder5 .

    ;               reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    IF              reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    WHILE           reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    FOR             reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    RETURN          reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    BREAK           reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    CONTINUE        reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    {               reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    PLUS_PLUS       reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    MINUS_MINUS     reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    INT             reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    FLOAT           reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    BOOLEAN         reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    ID              reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    THIS            reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    SUPER           reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    (               reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    NEW             reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    INT_CONST       reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    FLOAT_CONST     reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    STRING_CONST    reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    NULL            reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    TRUE            reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    FALSE           reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    }               reduce using rule 24 (placeholder5 -> , variable placeholder5 .)
    ELSE            reduce using rule 24 (placeholder5 -> , variable placeholder5 .)


state 66

    (27) method_decl -> modifier type ID ( placeholder7 ) . block
    (36) block -> . { placeholder9 }

    {               shift and go to state 68

    block                          shift and go to state 71

state 67

    (33) placeholder8 -> , formal_param . placeholder8
    (33) placeholder8 -> . , formal_param placeholder8
    (34) placeholder8 -> . empty
    (112) empty -> .

    ,               shift and go to state 60
    )               reduce using rule 112 (empty -> .)

    placeholder8                   shift and go to state 72
    empty                          shift and go to state 61

state 68

    (36) block -> { . placeholder9 }
    (37) placeholder9 -> . stmt placeholder9
    (38) placeholder9 -> . empty
    (39) stmt -> . openStmt
    (40) stmt -> . closedStmt
    (112) empty -> .
    (41) openStmt -> . IF ( expr ) stmt
    (42) openStmt -> . IF ( expr ) closedStmt ELSE openStmt
    (43) openStmt -> . WHILE ( expr ) openStmt
    (44) openStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (45) closedStmt -> . RETURN placeholder12 ;
    (46) closedStmt -> . stmt_expr ;
    (47) closedStmt -> . BREAK ;
    (48) closedStmt -> . CONTINUE ;
    (49) closedStmt -> . var_decl
    (50) closedStmt -> . ;
    (51) closedStmt -> . block
    (52) closedStmt -> . IF ( expr ) closedStmt ELSE closedStmt
    (53) closedStmt -> . WHILE ( expr ) closedStmt
    (54) closedStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (18) var_decl -> . type variables
    (36) block -> . { placeholder9 }
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    }               reduce using rule 112 (empty -> .)
    IF              shift and go to state 96
    WHILE           shift and go to state 76
    FOR             shift and go to state 93
    RETURN          shift and go to state 73
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 101
    ;               shift and go to state 89
    {               shift and go to state 68
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 85
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    closedStmt                     shift and go to state 99
    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    stmt                           shift and go to state 95
    placeholder9                   shift and go to state 81
    stmt_expr                      shift and go to state 86
    literal                        shift and go to state 87
    block                          shift and go to state 107
    lhs                            shift and go to state 102
    var_decl                       shift and go to state 98
    method_invocation              shift and go to state 88
    openStmt                       shift and go to state 105
    type                           shift and go to state 90
    assign                         shift and go to state 106
    empty                          shift and go to state 91

state 69

    (29) constructor_decl -> modifier ID ( placeholder7 ) block .

    PUBLIC          reduce using rule 29 (constructor_decl -> modifier ID ( placeholder7 ) block .)
    PRIVATE         reduce using rule 29 (constructor_decl -> modifier ID ( placeholder7 ) block .)
    VOID            reduce using rule 29 (constructor_decl -> modifier ID ( placeholder7 ) block .)
    ID              reduce using rule 29 (constructor_decl -> modifier ID ( placeholder7 ) block .)
    INT             reduce using rule 29 (constructor_decl -> modifier ID ( placeholder7 ) block .)
    FLOAT           reduce using rule 29 (constructor_decl -> modifier ID ( placeholder7 ) block .)
    BOOLEAN         reduce using rule 29 (constructor_decl -> modifier ID ( placeholder7 ) block .)
    STATIC          reduce using rule 29 (constructor_decl -> modifier ID ( placeholder7 ) block .)
    }               reduce using rule 29 (constructor_decl -> modifier ID ( placeholder7 ) block .)


state 70

    (28) method_decl -> modifier VOID ID ( placeholder7 ) block .

    PUBLIC          reduce using rule 28 (method_decl -> modifier VOID ID ( placeholder7 ) block .)
    PRIVATE         reduce using rule 28 (method_decl -> modifier VOID ID ( placeholder7 ) block .)
    }               reduce using rule 28 (method_decl -> modifier VOID ID ( placeholder7 ) block .)
    VOID            reduce using rule 28 (method_decl -> modifier VOID ID ( placeholder7 ) block .)
    ID              reduce using rule 28 (method_decl -> modifier VOID ID ( placeholder7 ) block .)
    INT             reduce using rule 28 (method_decl -> modifier VOID ID ( placeholder7 ) block .)
    FLOAT           reduce using rule 28 (method_decl -> modifier VOID ID ( placeholder7 ) block .)
    BOOLEAN         reduce using rule 28 (method_decl -> modifier VOID ID ( placeholder7 ) block .)
    STATIC          reduce using rule 28 (method_decl -> modifier VOID ID ( placeholder7 ) block .)


state 71

    (27) method_decl -> modifier type ID ( placeholder7 ) block .

    PUBLIC          reduce using rule 27 (method_decl -> modifier type ID ( placeholder7 ) block .)
    PRIVATE         reduce using rule 27 (method_decl -> modifier type ID ( placeholder7 ) block .)
    }               reduce using rule 27 (method_decl -> modifier type ID ( placeholder7 ) block .)
    VOID            reduce using rule 27 (method_decl -> modifier type ID ( placeholder7 ) block .)
    ID              reduce using rule 27 (method_decl -> modifier type ID ( placeholder7 ) block .)
    INT             reduce using rule 27 (method_decl -> modifier type ID ( placeholder7 ) block .)
    FLOAT           reduce using rule 27 (method_decl -> modifier type ID ( placeholder7 ) block .)
    BOOLEAN         reduce using rule 27 (method_decl -> modifier type ID ( placeholder7 ) block .)
    STATIC          reduce using rule 27 (method_decl -> modifier type ID ( placeholder7 ) block .)


state 72

    (33) placeholder8 -> , formal_param placeholder8 .

    )               reduce using rule 33 (placeholder8 -> , formal_param placeholder8 .)


state 73

    (45) closedStmt -> RETURN . placeholder12 ;
    (57) placeholder12 -> . expr
    (58) placeholder12 -> . empty
    (81) expr -> . assign
    (82) expr -> . p1
    (112) empty -> .
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (88) p1 -> . p1 BOOL_OR p2
    (89) p1 -> . p2
    (77) lhs -> . field_access
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary

    ;               reduce using rule 112 (empty -> .)
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110

    p2                             shift and go to state 118
    field_access                   shift and go to state 112
    placeholder12                  shift and go to state 120
    p6                             shift and go to state 115
    p4                             shift and go to state 121
    p3                             shift and go to state 119
    expr                           shift and go to state 123
    p5                             shift and go to state 122
    primary                        shift and go to state 113
    literal                        shift and go to state 87
    p1                             shift and go to state 114
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 111
    assign                         shift and go to state 125
    empty                          shift and go to state 124
    p7                             shift and go to state 117

state 74

    (80) method_invocation -> field_access . ( placeholder14 )
    (77) lhs -> field_access .

    (               shift and go to state 126
    =               reduce using rule 77 (lhs -> field_access .)
    PLUS_PLUS       reduce using rule 77 (lhs -> field_access .)
    MINUS_MINUS     reduce using rule 77 (lhs -> field_access .)
    .               reduce using rule 77 (lhs -> field_access .)


state 75

    (78) field_access -> primary . . ID

    .               shift and go to state 127


state 76

    (43) openStmt -> WHILE . ( expr ) openStmt
    (53) closedStmt -> WHILE . ( expr ) closedStmt

    (               shift and go to state 128


state 77

    (60) literal -> FLOAT_CONST .

    .               reduce using rule 60 (literal -> FLOAT_CONST .)
    *               reduce using rule 60 (literal -> FLOAT_CONST .)
    /               reduce using rule 60 (literal -> FLOAT_CONST .)
    +               reduce using rule 60 (literal -> FLOAT_CONST .)
    -               reduce using rule 60 (literal -> FLOAT_CONST .)
    <               reduce using rule 60 (literal -> FLOAT_CONST .)
    >               reduce using rule 60 (literal -> FLOAT_CONST .)
    LESS_THAN_OR_EQUAL reduce using rule 60 (literal -> FLOAT_CONST .)
    GREATER_THAN_OR_EQUAL reduce using rule 60 (literal -> FLOAT_CONST .)
    EQUAL           reduce using rule 60 (literal -> FLOAT_CONST .)
    NOT_EQUAL       reduce using rule 60 (literal -> FLOAT_CONST .)
    BOOL_AND        reduce using rule 60 (literal -> FLOAT_CONST .)
    BOOL_OR         reduce using rule 60 (literal -> FLOAT_CONST .)
    ,               reduce using rule 60 (literal -> FLOAT_CONST .)
    )               reduce using rule 60 (literal -> FLOAT_CONST .)
    ;               reduce using rule 60 (literal -> FLOAT_CONST .)


state 78

    (69) primary -> NEW . ID ( placeholder14 )

    ID              shift and go to state 129


state 79

    (63) literal -> TRUE .

    .               reduce using rule 63 (literal -> TRUE .)
    *               reduce using rule 63 (literal -> TRUE .)
    /               reduce using rule 63 (literal -> TRUE .)
    +               reduce using rule 63 (literal -> TRUE .)
    -               reduce using rule 63 (literal -> TRUE .)
    <               reduce using rule 63 (literal -> TRUE .)
    >               reduce using rule 63 (literal -> TRUE .)
    LESS_THAN_OR_EQUAL reduce using rule 63 (literal -> TRUE .)
    GREATER_THAN_OR_EQUAL reduce using rule 63 (literal -> TRUE .)
    EQUAL           reduce using rule 63 (literal -> TRUE .)
    NOT_EQUAL       reduce using rule 63 (literal -> TRUE .)
    BOOL_AND        reduce using rule 63 (literal -> TRUE .)
    BOOL_OR         reduce using rule 63 (literal -> TRUE .)
    ,               reduce using rule 63 (literal -> TRUE .)
    )               reduce using rule 63 (literal -> TRUE .)
    ;               reduce using rule 63 (literal -> TRUE .)


state 80

    (61) literal -> STRING_CONST .

    .               reduce using rule 61 (literal -> STRING_CONST .)
    *               reduce using rule 61 (literal -> STRING_CONST .)
    /               reduce using rule 61 (literal -> STRING_CONST .)
    +               reduce using rule 61 (literal -> STRING_CONST .)
    -               reduce using rule 61 (literal -> STRING_CONST .)
    <               reduce using rule 61 (literal -> STRING_CONST .)
    >               reduce using rule 61 (literal -> STRING_CONST .)
    LESS_THAN_OR_EQUAL reduce using rule 61 (literal -> STRING_CONST .)
    GREATER_THAN_OR_EQUAL reduce using rule 61 (literal -> STRING_CONST .)
    EQUAL           reduce using rule 61 (literal -> STRING_CONST .)
    NOT_EQUAL       reduce using rule 61 (literal -> STRING_CONST .)
    BOOL_AND        reduce using rule 61 (literal -> STRING_CONST .)
    BOOL_OR         reduce using rule 61 (literal -> STRING_CONST .)
    ,               reduce using rule 61 (literal -> STRING_CONST .)
    )               reduce using rule 61 (literal -> STRING_CONST .)
    ;               reduce using rule 61 (literal -> STRING_CONST .)


state 81

    (36) block -> { placeholder9 . }

    }               shift and go to state 130


state 82

    (59) literal -> INT_CONST .

    .               reduce using rule 59 (literal -> INT_CONST .)
    *               reduce using rule 59 (literal -> INT_CONST .)
    /               reduce using rule 59 (literal -> INT_CONST .)
    +               reduce using rule 59 (literal -> INT_CONST .)
    -               reduce using rule 59 (literal -> INT_CONST .)
    <               reduce using rule 59 (literal -> INT_CONST .)
    >               reduce using rule 59 (literal -> INT_CONST .)
    LESS_THAN_OR_EQUAL reduce using rule 59 (literal -> INT_CONST .)
    GREATER_THAN_OR_EQUAL reduce using rule 59 (literal -> INT_CONST .)
    EQUAL           reduce using rule 59 (literal -> INT_CONST .)
    NOT_EQUAL       reduce using rule 59 (literal -> INT_CONST .)
    BOOL_AND        reduce using rule 59 (literal -> INT_CONST .)
    BOOL_OR         reduce using rule 59 (literal -> INT_CONST .)
    ,               reduce using rule 59 (literal -> INT_CONST .)
    )               reduce using rule 59 (literal -> INT_CONST .)
    ;               reduce using rule 59 (literal -> INT_CONST .)


state 83

    (62) literal -> NULL .

    .               reduce using rule 62 (literal -> NULL .)
    *               reduce using rule 62 (literal -> NULL .)
    /               reduce using rule 62 (literal -> NULL .)
    +               reduce using rule 62 (literal -> NULL .)
    -               reduce using rule 62 (literal -> NULL .)
    <               reduce using rule 62 (literal -> NULL .)
    >               reduce using rule 62 (literal -> NULL .)
    LESS_THAN_OR_EQUAL reduce using rule 62 (literal -> NULL .)
    GREATER_THAN_OR_EQUAL reduce using rule 62 (literal -> NULL .)
    EQUAL           reduce using rule 62 (literal -> NULL .)
    NOT_EQUAL       reduce using rule 62 (literal -> NULL .)
    BOOL_AND        reduce using rule 62 (literal -> NULL .)
    BOOL_OR         reduce using rule 62 (literal -> NULL .)
    ,               reduce using rule 62 (literal -> NULL .)
    )               reduce using rule 62 (literal -> NULL .)
    ;               reduce using rule 62 (literal -> NULL .)


state 84

    (68) primary -> ( . expr )
    (81) expr -> . assign
    (82) expr -> . p1
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (88) p1 -> . p1 BOOL_OR p2
    (89) p1 -> . p2
    (77) lhs -> . field_access
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary

    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110

    p2                             shift and go to state 118
    field_access                   shift and go to state 112
    p1                             shift and go to state 114
    p6                             shift and go to state 115
    p4                             shift and go to state 121
    p3                             shift and go to state 119
    expr                           shift and go to state 131
    p5                             shift and go to state 122
    primary                        shift and go to state 113
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 111
    assign                         shift and go to state 125
    p7                             shift and go to state 117

state 85

    (22) type -> ID .
    (79) field_access -> ID .

    ID              reduce using rule 22 (type -> ID .)
    (               reduce using rule 79 (field_access -> ID .)
    =               reduce using rule 79 (field_access -> ID .)
    PLUS_PLUS       reduce using rule 79 (field_access -> ID .)
    MINUS_MINUS     reduce using rule 79 (field_access -> ID .)
    .               reduce using rule 79 (field_access -> ID .)


state 86

    (46) closedStmt -> stmt_expr . ;

    ;               shift and go to state 132


state 87

    (65) primary -> literal .

    .               reduce using rule 65 (primary -> literal .)
    *               reduce using rule 65 (primary -> literal .)
    /               reduce using rule 65 (primary -> literal .)
    +               reduce using rule 65 (primary -> literal .)
    -               reduce using rule 65 (primary -> literal .)
    <               reduce using rule 65 (primary -> literal .)
    >               reduce using rule 65 (primary -> literal .)
    LESS_THAN_OR_EQUAL reduce using rule 65 (primary -> literal .)
    GREATER_THAN_OR_EQUAL reduce using rule 65 (primary -> literal .)
    EQUAL           reduce using rule 65 (primary -> literal .)
    NOT_EQUAL       reduce using rule 65 (primary -> literal .)
    BOOL_AND        reduce using rule 65 (primary -> literal .)
    BOOL_OR         reduce using rule 65 (primary -> literal .)
    ;               reduce using rule 65 (primary -> literal .)
    )               reduce using rule 65 (primary -> literal .)
    ,               reduce using rule 65 (primary -> literal .)


state 88

    (111) stmt_expr -> method_invocation .
    (71) primary -> method_invocation .

    ;               reduce using rule 111 (stmt_expr -> method_invocation .)
    )               reduce using rule 111 (stmt_expr -> method_invocation .)
    .               reduce using rule 71 (primary -> method_invocation .)


state 89

    (50) closedStmt -> ; .

    ELSE            reduce using rule 50 (closedStmt -> ; .)
    IF              reduce using rule 50 (closedStmt -> ; .)
    WHILE           reduce using rule 50 (closedStmt -> ; .)
    FOR             reduce using rule 50 (closedStmt -> ; .)
    RETURN          reduce using rule 50 (closedStmt -> ; .)
    BREAK           reduce using rule 50 (closedStmt -> ; .)
    CONTINUE        reduce using rule 50 (closedStmt -> ; .)
    ;               reduce using rule 50 (closedStmt -> ; .)
    {               reduce using rule 50 (closedStmt -> ; .)
    PLUS_PLUS       reduce using rule 50 (closedStmt -> ; .)
    MINUS_MINUS     reduce using rule 50 (closedStmt -> ; .)
    INT             reduce using rule 50 (closedStmt -> ; .)
    FLOAT           reduce using rule 50 (closedStmt -> ; .)
    BOOLEAN         reduce using rule 50 (closedStmt -> ; .)
    ID              reduce using rule 50 (closedStmt -> ; .)
    THIS            reduce using rule 50 (closedStmt -> ; .)
    SUPER           reduce using rule 50 (closedStmt -> ; .)
    (               reduce using rule 50 (closedStmt -> ; .)
    NEW             reduce using rule 50 (closedStmt -> ; .)
    INT_CONST       reduce using rule 50 (closedStmt -> ; .)
    FLOAT_CONST     reduce using rule 50 (closedStmt -> ; .)
    STRING_CONST    reduce using rule 50 (closedStmt -> ; .)
    NULL            reduce using rule 50 (closedStmt -> ; .)
    TRUE            reduce using rule 50 (closedStmt -> ; .)
    FALSE           reduce using rule 50 (closedStmt -> ; .)
    }               reduce using rule 50 (closedStmt -> ; .)


state 90

    (18) var_decl -> type . variables
    (23) variables -> . variable placeholder5
    (26) variable -> . ID

    ID              shift and go to state 57

    variable                       shift and go to state 40
    variables                      shift and go to state 39

state 91

    (38) placeholder9 -> empty .

    }               reduce using rule 38 (placeholder9 -> empty .)


state 92

    (47) closedStmt -> BREAK . ;

    ;               shift and go to state 133


state 93

    (44) openStmt -> FOR . ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (54) closedStmt -> FOR . ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt

    (               shift and go to state 134


state 94

    (67) primary -> SUPER .

    .               reduce using rule 67 (primary -> SUPER .)
    *               reduce using rule 67 (primary -> SUPER .)
    /               reduce using rule 67 (primary -> SUPER .)
    +               reduce using rule 67 (primary -> SUPER .)
    -               reduce using rule 67 (primary -> SUPER .)
    <               reduce using rule 67 (primary -> SUPER .)
    >               reduce using rule 67 (primary -> SUPER .)
    LESS_THAN_OR_EQUAL reduce using rule 67 (primary -> SUPER .)
    GREATER_THAN_OR_EQUAL reduce using rule 67 (primary -> SUPER .)
    EQUAL           reduce using rule 67 (primary -> SUPER .)
    NOT_EQUAL       reduce using rule 67 (primary -> SUPER .)
    BOOL_AND        reduce using rule 67 (primary -> SUPER .)
    BOOL_OR         reduce using rule 67 (primary -> SUPER .)
    ;               reduce using rule 67 (primary -> SUPER .)
    )               reduce using rule 67 (primary -> SUPER .)
    ,               reduce using rule 67 (primary -> SUPER .)


state 95

    (37) placeholder9 -> stmt . placeholder9
    (37) placeholder9 -> . stmt placeholder9
    (38) placeholder9 -> . empty
    (39) stmt -> . openStmt
    (40) stmt -> . closedStmt
    (112) empty -> .
    (41) openStmt -> . IF ( expr ) stmt
    (42) openStmt -> . IF ( expr ) closedStmt ELSE openStmt
    (43) openStmt -> . WHILE ( expr ) openStmt
    (44) openStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (45) closedStmt -> . RETURN placeholder12 ;
    (46) closedStmt -> . stmt_expr ;
    (47) closedStmt -> . BREAK ;
    (48) closedStmt -> . CONTINUE ;
    (49) closedStmt -> . var_decl
    (50) closedStmt -> . ;
    (51) closedStmt -> . block
    (52) closedStmt -> . IF ( expr ) closedStmt ELSE closedStmt
    (53) closedStmt -> . WHILE ( expr ) closedStmt
    (54) closedStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (18) var_decl -> . type variables
    (36) block -> . { placeholder9 }
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    }               reduce using rule 112 (empty -> .)
    IF              shift and go to state 96
    WHILE           shift and go to state 76
    FOR             shift and go to state 93
    RETURN          shift and go to state 73
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 101
    ;               shift and go to state 89
    {               shift and go to state 68
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 85
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    closedStmt                     shift and go to state 99
    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    stmt                           shift and go to state 95
    placeholder9                   shift and go to state 135
    stmt_expr                      shift and go to state 86
    literal                        shift and go to state 87
    block                          shift and go to state 107
    lhs                            shift and go to state 102
    var_decl                       shift and go to state 98
    method_invocation              shift and go to state 88
    openStmt                       shift and go to state 105
    type                           shift and go to state 90
    assign                         shift and go to state 106
    empty                          shift and go to state 91

state 96

    (41) openStmt -> IF . ( expr ) stmt
    (42) openStmt -> IF . ( expr ) closedStmt ELSE openStmt
    (52) closedStmt -> IF . ( expr ) closedStmt ELSE closedStmt

    (               shift and go to state 136


state 97

    (64) literal -> FALSE .

    .               reduce using rule 64 (literal -> FALSE .)
    *               reduce using rule 64 (literal -> FALSE .)
    /               reduce using rule 64 (literal -> FALSE .)
    +               reduce using rule 64 (literal -> FALSE .)
    -               reduce using rule 64 (literal -> FALSE .)
    <               reduce using rule 64 (literal -> FALSE .)
    >               reduce using rule 64 (literal -> FALSE .)
    LESS_THAN_OR_EQUAL reduce using rule 64 (literal -> FALSE .)
    GREATER_THAN_OR_EQUAL reduce using rule 64 (literal -> FALSE .)
    EQUAL           reduce using rule 64 (literal -> FALSE .)
    NOT_EQUAL       reduce using rule 64 (literal -> FALSE .)
    BOOL_AND        reduce using rule 64 (literal -> FALSE .)
    BOOL_OR         reduce using rule 64 (literal -> FALSE .)
    ,               reduce using rule 64 (literal -> FALSE .)
    )               reduce using rule 64 (literal -> FALSE .)
    ;               reduce using rule 64 (literal -> FALSE .)


state 98

    (49) closedStmt -> var_decl .

    ELSE            reduce using rule 49 (closedStmt -> var_decl .)
    IF              reduce using rule 49 (closedStmt -> var_decl .)
    WHILE           reduce using rule 49 (closedStmt -> var_decl .)
    FOR             reduce using rule 49 (closedStmt -> var_decl .)
    RETURN          reduce using rule 49 (closedStmt -> var_decl .)
    BREAK           reduce using rule 49 (closedStmt -> var_decl .)
    CONTINUE        reduce using rule 49 (closedStmt -> var_decl .)
    ;               reduce using rule 49 (closedStmt -> var_decl .)
    {               reduce using rule 49 (closedStmt -> var_decl .)
    PLUS_PLUS       reduce using rule 49 (closedStmt -> var_decl .)
    MINUS_MINUS     reduce using rule 49 (closedStmt -> var_decl .)
    INT             reduce using rule 49 (closedStmt -> var_decl .)
    FLOAT           reduce using rule 49 (closedStmt -> var_decl .)
    BOOLEAN         reduce using rule 49 (closedStmt -> var_decl .)
    ID              reduce using rule 49 (closedStmt -> var_decl .)
    THIS            reduce using rule 49 (closedStmt -> var_decl .)
    SUPER           reduce using rule 49 (closedStmt -> var_decl .)
    (               reduce using rule 49 (closedStmt -> var_decl .)
    NEW             reduce using rule 49 (closedStmt -> var_decl .)
    INT_CONST       reduce using rule 49 (closedStmt -> var_decl .)
    FLOAT_CONST     reduce using rule 49 (closedStmt -> var_decl .)
    STRING_CONST    reduce using rule 49 (closedStmt -> var_decl .)
    NULL            reduce using rule 49 (closedStmt -> var_decl .)
    TRUE            reduce using rule 49 (closedStmt -> var_decl .)
    FALSE           reduce using rule 49 (closedStmt -> var_decl .)
    }               reduce using rule 49 (closedStmt -> var_decl .)


state 99

    (40) stmt -> closedStmt .

    IF              reduce using rule 40 (stmt -> closedStmt .)
    WHILE           reduce using rule 40 (stmt -> closedStmt .)
    FOR             reduce using rule 40 (stmt -> closedStmt .)
    RETURN          reduce using rule 40 (stmt -> closedStmt .)
    BREAK           reduce using rule 40 (stmt -> closedStmt .)
    CONTINUE        reduce using rule 40 (stmt -> closedStmt .)
    ;               reduce using rule 40 (stmt -> closedStmt .)
    {               reduce using rule 40 (stmt -> closedStmt .)
    PLUS_PLUS       reduce using rule 40 (stmt -> closedStmt .)
    MINUS_MINUS     reduce using rule 40 (stmt -> closedStmt .)
    INT             reduce using rule 40 (stmt -> closedStmt .)
    FLOAT           reduce using rule 40 (stmt -> closedStmt .)
    BOOLEAN         reduce using rule 40 (stmt -> closedStmt .)
    ID              reduce using rule 40 (stmt -> closedStmt .)
    THIS            reduce using rule 40 (stmt -> closedStmt .)
    SUPER           reduce using rule 40 (stmt -> closedStmt .)
    (               reduce using rule 40 (stmt -> closedStmt .)
    NEW             reduce using rule 40 (stmt -> closedStmt .)
    INT_CONST       reduce using rule 40 (stmt -> closedStmt .)
    FLOAT_CONST     reduce using rule 40 (stmt -> closedStmt .)
    STRING_CONST    reduce using rule 40 (stmt -> closedStmt .)
    NULL            reduce using rule 40 (stmt -> closedStmt .)
    TRUE            reduce using rule 40 (stmt -> closedStmt .)
    FALSE           reduce using rule 40 (stmt -> closedStmt .)
    }               reduce using rule 40 (stmt -> closedStmt .)


state 100

    (66) primary -> THIS .

    .               reduce using rule 66 (primary -> THIS .)
    *               reduce using rule 66 (primary -> THIS .)
    /               reduce using rule 66 (primary -> THIS .)
    +               reduce using rule 66 (primary -> THIS .)
    -               reduce using rule 66 (primary -> THIS .)
    <               reduce using rule 66 (primary -> THIS .)
    >               reduce using rule 66 (primary -> THIS .)
    LESS_THAN_OR_EQUAL reduce using rule 66 (primary -> THIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 66 (primary -> THIS .)
    EQUAL           reduce using rule 66 (primary -> THIS .)
    NOT_EQUAL       reduce using rule 66 (primary -> THIS .)
    BOOL_AND        reduce using rule 66 (primary -> THIS .)
    BOOL_OR         reduce using rule 66 (primary -> THIS .)
    ;               reduce using rule 66 (primary -> THIS .)
    )               reduce using rule 66 (primary -> THIS .)
    ,               reduce using rule 66 (primary -> THIS .)


state 101

    (48) closedStmt -> CONTINUE . ;

    ;               shift and go to state 137


state 102

    (83) assign -> lhs . = expr
    (84) assign -> lhs . PLUS_PLUS
    (86) assign -> lhs . MINUS_MINUS
    (70) primary -> lhs .

    =               shift and go to state 138
    PLUS_PLUS       shift and go to state 140
    MINUS_MINUS     shift and go to state 139
    .               reduce using rule 70 (primary -> lhs .)
    *               reduce using rule 70 (primary -> lhs .)
    /               reduce using rule 70 (primary -> lhs .)
    +               reduce using rule 70 (primary -> lhs .)
    -               reduce using rule 70 (primary -> lhs .)
    <               reduce using rule 70 (primary -> lhs .)
    >               reduce using rule 70 (primary -> lhs .)
    LESS_THAN_OR_EQUAL reduce using rule 70 (primary -> lhs .)
    GREATER_THAN_OR_EQUAL reduce using rule 70 (primary -> lhs .)
    EQUAL           reduce using rule 70 (primary -> lhs .)
    NOT_EQUAL       reduce using rule 70 (primary -> lhs .)
    BOOL_AND        reduce using rule 70 (primary -> lhs .)
    BOOL_OR         reduce using rule 70 (primary -> lhs .)
    )               reduce using rule 70 (primary -> lhs .)
    ;               reduce using rule 70 (primary -> lhs .)
    ,               reduce using rule 70 (primary -> lhs .)


state 103

    (87) assign -> MINUS_MINUS . lhs
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )

    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    field_access                   shift and go to state 112
    primary                        shift and go to state 75
    literal                        shift and go to state 87
    lhs                            shift and go to state 141
    method_invocation              shift and go to state 111

state 104

    (85) assign -> PLUS_PLUS . lhs
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )

    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    field_access                   shift and go to state 112
    primary                        shift and go to state 75
    literal                        shift and go to state 87
    lhs                            shift and go to state 142
    method_invocation              shift and go to state 111

state 105

    (39) stmt -> openStmt .

    IF              reduce using rule 39 (stmt -> openStmt .)
    WHILE           reduce using rule 39 (stmt -> openStmt .)
    FOR             reduce using rule 39 (stmt -> openStmt .)
    RETURN          reduce using rule 39 (stmt -> openStmt .)
    BREAK           reduce using rule 39 (stmt -> openStmt .)
    CONTINUE        reduce using rule 39 (stmt -> openStmt .)
    ;               reduce using rule 39 (stmt -> openStmt .)
    {               reduce using rule 39 (stmt -> openStmt .)
    PLUS_PLUS       reduce using rule 39 (stmt -> openStmt .)
    MINUS_MINUS     reduce using rule 39 (stmt -> openStmt .)
    INT             reduce using rule 39 (stmt -> openStmt .)
    FLOAT           reduce using rule 39 (stmt -> openStmt .)
    BOOLEAN         reduce using rule 39 (stmt -> openStmt .)
    ID              reduce using rule 39 (stmt -> openStmt .)
    THIS            reduce using rule 39 (stmt -> openStmt .)
    SUPER           reduce using rule 39 (stmt -> openStmt .)
    (               reduce using rule 39 (stmt -> openStmt .)
    NEW             reduce using rule 39 (stmt -> openStmt .)
    INT_CONST       reduce using rule 39 (stmt -> openStmt .)
    FLOAT_CONST     reduce using rule 39 (stmt -> openStmt .)
    STRING_CONST    reduce using rule 39 (stmt -> openStmt .)
    NULL            reduce using rule 39 (stmt -> openStmt .)
    TRUE            reduce using rule 39 (stmt -> openStmt .)
    FALSE           reduce using rule 39 (stmt -> openStmt .)
    }               reduce using rule 39 (stmt -> openStmt .)


state 106

    (110) stmt_expr -> assign .

    ;               reduce using rule 110 (stmt_expr -> assign .)
    )               reduce using rule 110 (stmt_expr -> assign .)


state 107

    (51) closedStmt -> block .

    ELSE            reduce using rule 51 (closedStmt -> block .)
    IF              reduce using rule 51 (closedStmt -> block .)
    WHILE           reduce using rule 51 (closedStmt -> block .)
    FOR             reduce using rule 51 (closedStmt -> block .)
    RETURN          reduce using rule 51 (closedStmt -> block .)
    BREAK           reduce using rule 51 (closedStmt -> block .)
    CONTINUE        reduce using rule 51 (closedStmt -> block .)
    ;               reduce using rule 51 (closedStmt -> block .)
    {               reduce using rule 51 (closedStmt -> block .)
    PLUS_PLUS       reduce using rule 51 (closedStmt -> block .)
    MINUS_MINUS     reduce using rule 51 (closedStmt -> block .)
    INT             reduce using rule 51 (closedStmt -> block .)
    FLOAT           reduce using rule 51 (closedStmt -> block .)
    BOOLEAN         reduce using rule 51 (closedStmt -> block .)
    ID              reduce using rule 51 (closedStmt -> block .)
    THIS            reduce using rule 51 (closedStmt -> block .)
    SUPER           reduce using rule 51 (closedStmt -> block .)
    (               reduce using rule 51 (closedStmt -> block .)
    NEW             reduce using rule 51 (closedStmt -> block .)
    INT_CONST       reduce using rule 51 (closedStmt -> block .)
    FLOAT_CONST     reduce using rule 51 (closedStmt -> block .)
    STRING_CONST    reduce using rule 51 (closedStmt -> block .)
    NULL            reduce using rule 51 (closedStmt -> block .)
    TRUE            reduce using rule 51 (closedStmt -> block .)
    FALSE           reduce using rule 51 (closedStmt -> block .)
    }               reduce using rule 51 (closedStmt -> block .)


state 108

    (106) p7 -> ! . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    field_access                   shift and go to state 112
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111
    p7                             shift and go to state 144

state 109

    (107) p7 -> + . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    field_access                   shift and go to state 112
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111
    p7                             shift and go to state 146

state 110

    (108) p7 -> - . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    field_access                   shift and go to state 112
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111
    p7                             shift and go to state 147

state 111

    (71) primary -> method_invocation .

    .               reduce using rule 71 (primary -> method_invocation .)
    *               reduce using rule 71 (primary -> method_invocation .)
    /               reduce using rule 71 (primary -> method_invocation .)
    +               reduce using rule 71 (primary -> method_invocation .)
    -               reduce using rule 71 (primary -> method_invocation .)
    <               reduce using rule 71 (primary -> method_invocation .)
    >               reduce using rule 71 (primary -> method_invocation .)
    LESS_THAN_OR_EQUAL reduce using rule 71 (primary -> method_invocation .)
    GREATER_THAN_OR_EQUAL reduce using rule 71 (primary -> method_invocation .)
    EQUAL           reduce using rule 71 (primary -> method_invocation .)
    NOT_EQUAL       reduce using rule 71 (primary -> method_invocation .)
    BOOL_AND        reduce using rule 71 (primary -> method_invocation .)
    BOOL_OR         reduce using rule 71 (primary -> method_invocation .)
    ;               reduce using rule 71 (primary -> method_invocation .)
    )               reduce using rule 71 (primary -> method_invocation .)
    ,               reduce using rule 71 (primary -> method_invocation .)


state 112

    (77) lhs -> field_access .
    (80) method_invocation -> field_access . ( placeholder14 )

    .               reduce using rule 77 (lhs -> field_access .)
    *               reduce using rule 77 (lhs -> field_access .)
    /               reduce using rule 77 (lhs -> field_access .)
    +               reduce using rule 77 (lhs -> field_access .)
    -               reduce using rule 77 (lhs -> field_access .)
    <               reduce using rule 77 (lhs -> field_access .)
    >               reduce using rule 77 (lhs -> field_access .)
    LESS_THAN_OR_EQUAL reduce using rule 77 (lhs -> field_access .)
    GREATER_THAN_OR_EQUAL reduce using rule 77 (lhs -> field_access .)
    EQUAL           reduce using rule 77 (lhs -> field_access .)
    NOT_EQUAL       reduce using rule 77 (lhs -> field_access .)
    BOOL_AND        reduce using rule 77 (lhs -> field_access .)
    BOOL_OR         reduce using rule 77 (lhs -> field_access .)
    ;               reduce using rule 77 (lhs -> field_access .)
    )               reduce using rule 77 (lhs -> field_access .)
    ,               reduce using rule 77 (lhs -> field_access .)
    =               reduce using rule 77 (lhs -> field_access .)
    PLUS_PLUS       reduce using rule 77 (lhs -> field_access .)
    MINUS_MINUS     reduce using rule 77 (lhs -> field_access .)
    (               shift and go to state 126


state 113

    (78) field_access -> primary . . ID
    (109) p7 -> primary .

    .               shift and go to state 127
    *               reduce using rule 109 (p7 -> primary .)
    /               reduce using rule 109 (p7 -> primary .)
    +               reduce using rule 109 (p7 -> primary .)
    -               reduce using rule 109 (p7 -> primary .)
    <               reduce using rule 109 (p7 -> primary .)
    >               reduce using rule 109 (p7 -> primary .)
    LESS_THAN_OR_EQUAL reduce using rule 109 (p7 -> primary .)
    GREATER_THAN_OR_EQUAL reduce using rule 109 (p7 -> primary .)
    EQUAL           reduce using rule 109 (p7 -> primary .)
    NOT_EQUAL       reduce using rule 109 (p7 -> primary .)
    BOOL_AND        reduce using rule 109 (p7 -> primary .)
    BOOL_OR         reduce using rule 109 (p7 -> primary .)
    ;               reduce using rule 109 (p7 -> primary .)
    )               reduce using rule 109 (p7 -> primary .)
    ,               reduce using rule 109 (p7 -> primary .)


state 114

    (82) expr -> p1 .
    (88) p1 -> p1 . BOOL_OR p2

    )               reduce using rule 82 (expr -> p1 .)
    ;               reduce using rule 82 (expr -> p1 .)
    ,               reduce using rule 82 (expr -> p1 .)
    BOOL_OR         shift and go to state 148


state 115

    (102) p5 -> p6 .
    (103) p6 -> p6 . * p7
    (104) p6 -> p6 . / p7

    +               reduce using rule 102 (p5 -> p6 .)
    -               reduce using rule 102 (p5 -> p6 .)
    <               reduce using rule 102 (p5 -> p6 .)
    >               reduce using rule 102 (p5 -> p6 .)
    LESS_THAN_OR_EQUAL reduce using rule 102 (p5 -> p6 .)
    GREATER_THAN_OR_EQUAL reduce using rule 102 (p5 -> p6 .)
    EQUAL           reduce using rule 102 (p5 -> p6 .)
    NOT_EQUAL       reduce using rule 102 (p5 -> p6 .)
    BOOL_AND        reduce using rule 102 (p5 -> p6 .)
    BOOL_OR         reduce using rule 102 (p5 -> p6 .)
    ;               reduce using rule 102 (p5 -> p6 .)
    )               reduce using rule 102 (p5 -> p6 .)
    ,               reduce using rule 102 (p5 -> p6 .)
    *               shift and go to state 149
    /               shift and go to state 150


state 116

    (79) field_access -> ID .

    (               reduce using rule 79 (field_access -> ID .)
    .               reduce using rule 79 (field_access -> ID .)
    *               reduce using rule 79 (field_access -> ID .)
    /               reduce using rule 79 (field_access -> ID .)
    +               reduce using rule 79 (field_access -> ID .)
    -               reduce using rule 79 (field_access -> ID .)
    <               reduce using rule 79 (field_access -> ID .)
    >               reduce using rule 79 (field_access -> ID .)
    LESS_THAN_OR_EQUAL reduce using rule 79 (field_access -> ID .)
    GREATER_THAN_OR_EQUAL reduce using rule 79 (field_access -> ID .)
    EQUAL           reduce using rule 79 (field_access -> ID .)
    NOT_EQUAL       reduce using rule 79 (field_access -> ID .)
    BOOL_AND        reduce using rule 79 (field_access -> ID .)
    BOOL_OR         reduce using rule 79 (field_access -> ID .)
    ;               reduce using rule 79 (field_access -> ID .)
    )               reduce using rule 79 (field_access -> ID .)
    ,               reduce using rule 79 (field_access -> ID .)
    =               reduce using rule 79 (field_access -> ID .)
    PLUS_PLUS       reduce using rule 79 (field_access -> ID .)
    MINUS_MINUS     reduce using rule 79 (field_access -> ID .)


state 117

    (105) p6 -> p7 .

    *               reduce using rule 105 (p6 -> p7 .)
    /               reduce using rule 105 (p6 -> p7 .)
    +               reduce using rule 105 (p6 -> p7 .)
    -               reduce using rule 105 (p6 -> p7 .)
    <               reduce using rule 105 (p6 -> p7 .)
    >               reduce using rule 105 (p6 -> p7 .)
    LESS_THAN_OR_EQUAL reduce using rule 105 (p6 -> p7 .)
    GREATER_THAN_OR_EQUAL reduce using rule 105 (p6 -> p7 .)
    EQUAL           reduce using rule 105 (p6 -> p7 .)
    NOT_EQUAL       reduce using rule 105 (p6 -> p7 .)
    BOOL_AND        reduce using rule 105 (p6 -> p7 .)
    BOOL_OR         reduce using rule 105 (p6 -> p7 .)
    ;               reduce using rule 105 (p6 -> p7 .)
    )               reduce using rule 105 (p6 -> p7 .)
    ,               reduce using rule 105 (p6 -> p7 .)


state 118

    (89) p1 -> p2 .
    (90) p2 -> p2 . BOOL_AND p3

    BOOL_OR         reduce using rule 89 (p1 -> p2 .)
    )               reduce using rule 89 (p1 -> p2 .)
    ;               reduce using rule 89 (p1 -> p2 .)
    ,               reduce using rule 89 (p1 -> p2 .)
    BOOL_AND        shift and go to state 151


state 119

    (91) p2 -> p3 .
    (92) p3 -> p3 . EQUAL p4
    (93) p3 -> p3 . NOT_EQUAL p4

    BOOL_AND        reduce using rule 91 (p2 -> p3 .)
    BOOL_OR         reduce using rule 91 (p2 -> p3 .)
    )               reduce using rule 91 (p2 -> p3 .)
    ,               reduce using rule 91 (p2 -> p3 .)
    ;               reduce using rule 91 (p2 -> p3 .)
    EQUAL           shift and go to state 153
    NOT_EQUAL       shift and go to state 152


state 120

    (45) closedStmt -> RETURN placeholder12 . ;

    ;               shift and go to state 154


state 121

    (94) p3 -> p4 .
    (95) p4 -> p4 . < p5
    (96) p4 -> p4 . > p5
    (97) p4 -> p4 . LESS_THAN_OR_EQUAL p5
    (98) p4 -> p4 . GREATER_THAN_OR_EQUAL p5

    EQUAL           reduce using rule 94 (p3 -> p4 .)
    NOT_EQUAL       reduce using rule 94 (p3 -> p4 .)
    BOOL_AND        reduce using rule 94 (p3 -> p4 .)
    BOOL_OR         reduce using rule 94 (p3 -> p4 .)
    )               reduce using rule 94 (p3 -> p4 .)
    ,               reduce using rule 94 (p3 -> p4 .)
    ;               reduce using rule 94 (p3 -> p4 .)
    <               shift and go to state 157
    >               shift and go to state 158
    LESS_THAN_OR_EQUAL shift and go to state 156
    GREATER_THAN_OR_EQUAL shift and go to state 155


state 122

    (99) p4 -> p5 .
    (100) p5 -> p5 . + p6
    (101) p5 -> p5 . - p6

    <               reduce using rule 99 (p4 -> p5 .)
    >               reduce using rule 99 (p4 -> p5 .)
    LESS_THAN_OR_EQUAL reduce using rule 99 (p4 -> p5 .)
    GREATER_THAN_OR_EQUAL reduce using rule 99 (p4 -> p5 .)
    EQUAL           reduce using rule 99 (p4 -> p5 .)
    NOT_EQUAL       reduce using rule 99 (p4 -> p5 .)
    BOOL_AND        reduce using rule 99 (p4 -> p5 .)
    BOOL_OR         reduce using rule 99 (p4 -> p5 .)
    ;               reduce using rule 99 (p4 -> p5 .)
    )               reduce using rule 99 (p4 -> p5 .)
    ,               reduce using rule 99 (p4 -> p5 .)
    +               shift and go to state 160
    -               shift and go to state 159


state 123

    (57) placeholder12 -> expr .

    ;               reduce using rule 57 (placeholder12 -> expr .)


state 124

    (58) placeholder12 -> empty .

    ;               reduce using rule 58 (placeholder12 -> empty .)


state 125

    (81) expr -> assign .

    )               reduce using rule 81 (expr -> assign .)
    ;               reduce using rule 81 (expr -> assign .)
    ,               reduce using rule 81 (expr -> assign .)


state 126

    (80) method_invocation -> field_access ( . placeholder14 )
    (72) placeholder14 -> . arguments
    (73) placeholder14 -> . empty
    (74) arguments -> . expr placeholder15
    (112) empty -> .
    (81) expr -> . assign
    (82) expr -> . p1
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (88) p1 -> . p1 BOOL_OR p2
    (89) p1 -> . p2
    (77) lhs -> . field_access
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary

    )               reduce using rule 112 (empty -> .)
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110

    p2                             shift and go to state 118
    field_access                   shift and go to state 112
    p1                             shift and go to state 114
    placeholder14                  shift and go to state 163
    p4                             shift and go to state 121
    p3                             shift and go to state 119
    expr                           shift and go to state 164
    p5                             shift and go to state 122
    primary                        shift and go to state 113
    p6                             shift and go to state 115
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    arguments                      shift and go to state 161
    method_invocation              shift and go to state 111
    assign                         shift and go to state 125
    empty                          shift and go to state 162
    p7                             shift and go to state 117

state 127

    (78) field_access -> primary . . ID

    ID              shift and go to state 165


state 128

    (43) openStmt -> WHILE ( . expr ) openStmt
    (53) closedStmt -> WHILE ( . expr ) closedStmt
    (81) expr -> . assign
    (82) expr -> . p1
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (88) p1 -> . p1 BOOL_OR p2
    (89) p1 -> . p2
    (77) lhs -> . field_access
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary

    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110

    p2                             shift and go to state 118
    field_access                   shift and go to state 112
    p1                             shift and go to state 114
    p6                             shift and go to state 115
    p4                             shift and go to state 121
    p3                             shift and go to state 119
    expr                           shift and go to state 166
    p5                             shift and go to state 122
    primary                        shift and go to state 113
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 111
    assign                         shift and go to state 125
    p7                             shift and go to state 117

state 129

    (69) primary -> NEW ID . ( placeholder14 )

    (               shift and go to state 167


state 130

    (36) block -> { placeholder9 } .

    IF              reduce using rule 36 (block -> { placeholder9 } .)
    WHILE           reduce using rule 36 (block -> { placeholder9 } .)
    FOR             reduce using rule 36 (block -> { placeholder9 } .)
    RETURN          reduce using rule 36 (block -> { placeholder9 } .)
    BREAK           reduce using rule 36 (block -> { placeholder9 } .)
    CONTINUE        reduce using rule 36 (block -> { placeholder9 } .)
    ;               reduce using rule 36 (block -> { placeholder9 } .)
    {               reduce using rule 36 (block -> { placeholder9 } .)
    PLUS_PLUS       reduce using rule 36 (block -> { placeholder9 } .)
    MINUS_MINUS     reduce using rule 36 (block -> { placeholder9 } .)
    INT             reduce using rule 36 (block -> { placeholder9 } .)
    FLOAT           reduce using rule 36 (block -> { placeholder9 } .)
    BOOLEAN         reduce using rule 36 (block -> { placeholder9 } .)
    ID              reduce using rule 36 (block -> { placeholder9 } .)
    THIS            reduce using rule 36 (block -> { placeholder9 } .)
    SUPER           reduce using rule 36 (block -> { placeholder9 } .)
    (               reduce using rule 36 (block -> { placeholder9 } .)
    NEW             reduce using rule 36 (block -> { placeholder9 } .)
    INT_CONST       reduce using rule 36 (block -> { placeholder9 } .)
    FLOAT_CONST     reduce using rule 36 (block -> { placeholder9 } .)
    STRING_CONST    reduce using rule 36 (block -> { placeholder9 } .)
    NULL            reduce using rule 36 (block -> { placeholder9 } .)
    TRUE            reduce using rule 36 (block -> { placeholder9 } .)
    FALSE           reduce using rule 36 (block -> { placeholder9 } .)
    }               reduce using rule 36 (block -> { placeholder9 } .)
    ELSE            reduce using rule 36 (block -> { placeholder9 } .)
    PUBLIC          reduce using rule 36 (block -> { placeholder9 } .)
    PRIVATE         reduce using rule 36 (block -> { placeholder9 } .)
    VOID            reduce using rule 36 (block -> { placeholder9 } .)
    STATIC          reduce using rule 36 (block -> { placeholder9 } .)


state 131

    (68) primary -> ( expr . )

    )               shift and go to state 168


state 132

    (46) closedStmt -> stmt_expr ; .

    ELSE            reduce using rule 46 (closedStmt -> stmt_expr ; .)
    IF              reduce using rule 46 (closedStmt -> stmt_expr ; .)
    WHILE           reduce using rule 46 (closedStmt -> stmt_expr ; .)
    FOR             reduce using rule 46 (closedStmt -> stmt_expr ; .)
    RETURN          reduce using rule 46 (closedStmt -> stmt_expr ; .)
    BREAK           reduce using rule 46 (closedStmt -> stmt_expr ; .)
    CONTINUE        reduce using rule 46 (closedStmt -> stmt_expr ; .)
    ;               reduce using rule 46 (closedStmt -> stmt_expr ; .)
    {               reduce using rule 46 (closedStmt -> stmt_expr ; .)
    PLUS_PLUS       reduce using rule 46 (closedStmt -> stmt_expr ; .)
    MINUS_MINUS     reduce using rule 46 (closedStmt -> stmt_expr ; .)
    INT             reduce using rule 46 (closedStmt -> stmt_expr ; .)
    FLOAT           reduce using rule 46 (closedStmt -> stmt_expr ; .)
    BOOLEAN         reduce using rule 46 (closedStmt -> stmt_expr ; .)
    ID              reduce using rule 46 (closedStmt -> stmt_expr ; .)
    THIS            reduce using rule 46 (closedStmt -> stmt_expr ; .)
    SUPER           reduce using rule 46 (closedStmt -> stmt_expr ; .)
    (               reduce using rule 46 (closedStmt -> stmt_expr ; .)
    NEW             reduce using rule 46 (closedStmt -> stmt_expr ; .)
    INT_CONST       reduce using rule 46 (closedStmt -> stmt_expr ; .)
    FLOAT_CONST     reduce using rule 46 (closedStmt -> stmt_expr ; .)
    STRING_CONST    reduce using rule 46 (closedStmt -> stmt_expr ; .)
    NULL            reduce using rule 46 (closedStmt -> stmt_expr ; .)
    TRUE            reduce using rule 46 (closedStmt -> stmt_expr ; .)
    FALSE           reduce using rule 46 (closedStmt -> stmt_expr ; .)
    }               reduce using rule 46 (closedStmt -> stmt_expr ; .)


state 133

    (47) closedStmt -> BREAK ; .

    ELSE            reduce using rule 47 (closedStmt -> BREAK ; .)
    IF              reduce using rule 47 (closedStmt -> BREAK ; .)
    WHILE           reduce using rule 47 (closedStmt -> BREAK ; .)
    FOR             reduce using rule 47 (closedStmt -> BREAK ; .)
    RETURN          reduce using rule 47 (closedStmt -> BREAK ; .)
    BREAK           reduce using rule 47 (closedStmt -> BREAK ; .)
    CONTINUE        reduce using rule 47 (closedStmt -> BREAK ; .)
    ;               reduce using rule 47 (closedStmt -> BREAK ; .)
    {               reduce using rule 47 (closedStmt -> BREAK ; .)
    PLUS_PLUS       reduce using rule 47 (closedStmt -> BREAK ; .)
    MINUS_MINUS     reduce using rule 47 (closedStmt -> BREAK ; .)
    INT             reduce using rule 47 (closedStmt -> BREAK ; .)
    FLOAT           reduce using rule 47 (closedStmt -> BREAK ; .)
    BOOLEAN         reduce using rule 47 (closedStmt -> BREAK ; .)
    ID              reduce using rule 47 (closedStmt -> BREAK ; .)
    THIS            reduce using rule 47 (closedStmt -> BREAK ; .)
    SUPER           reduce using rule 47 (closedStmt -> BREAK ; .)
    (               reduce using rule 47 (closedStmt -> BREAK ; .)
    NEW             reduce using rule 47 (closedStmt -> BREAK ; .)
    INT_CONST       reduce using rule 47 (closedStmt -> BREAK ; .)
    FLOAT_CONST     reduce using rule 47 (closedStmt -> BREAK ; .)
    STRING_CONST    reduce using rule 47 (closedStmt -> BREAK ; .)
    NULL            reduce using rule 47 (closedStmt -> BREAK ; .)
    TRUE            reduce using rule 47 (closedStmt -> BREAK ; .)
    FALSE           reduce using rule 47 (closedStmt -> BREAK ; .)
    }               reduce using rule 47 (closedStmt -> BREAK ; .)


state 134

    (44) openStmt -> FOR ( . placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (54) closedStmt -> FOR ( . placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (55) placeholder11 -> . stmt_expr
    (56) placeholder11 -> . empty
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (112) empty -> .
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    ;               reduce using rule 112 (empty -> .)
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    placeholder11                  shift and go to state 170
    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    stmt_expr                      shift and go to state 169
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 88
    assign                         shift and go to state 106
    empty                          shift and go to state 171

state 135

    (37) placeholder9 -> stmt placeholder9 .

    }               reduce using rule 37 (placeholder9 -> stmt placeholder9 .)


state 136

    (41) openStmt -> IF ( . expr ) stmt
    (42) openStmt -> IF ( . expr ) closedStmt ELSE openStmt
    (52) closedStmt -> IF ( . expr ) closedStmt ELSE closedStmt
    (81) expr -> . assign
    (82) expr -> . p1
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (88) p1 -> . p1 BOOL_OR p2
    (89) p1 -> . p2
    (77) lhs -> . field_access
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary

    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110

    p2                             shift and go to state 118
    field_access                   shift and go to state 112
    p1                             shift and go to state 114
    p6                             shift and go to state 115
    p4                             shift and go to state 121
    p3                             shift and go to state 119
    expr                           shift and go to state 172
    p5                             shift and go to state 122
    primary                        shift and go to state 113
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 111
    assign                         shift and go to state 125
    p7                             shift and go to state 117

state 137

    (48) closedStmt -> CONTINUE ; .

    ELSE            reduce using rule 48 (closedStmt -> CONTINUE ; .)
    IF              reduce using rule 48 (closedStmt -> CONTINUE ; .)
    WHILE           reduce using rule 48 (closedStmt -> CONTINUE ; .)
    FOR             reduce using rule 48 (closedStmt -> CONTINUE ; .)
    RETURN          reduce using rule 48 (closedStmt -> CONTINUE ; .)
    BREAK           reduce using rule 48 (closedStmt -> CONTINUE ; .)
    CONTINUE        reduce using rule 48 (closedStmt -> CONTINUE ; .)
    ;               reduce using rule 48 (closedStmt -> CONTINUE ; .)
    {               reduce using rule 48 (closedStmt -> CONTINUE ; .)
    PLUS_PLUS       reduce using rule 48 (closedStmt -> CONTINUE ; .)
    MINUS_MINUS     reduce using rule 48 (closedStmt -> CONTINUE ; .)
    INT             reduce using rule 48 (closedStmt -> CONTINUE ; .)
    FLOAT           reduce using rule 48 (closedStmt -> CONTINUE ; .)
    BOOLEAN         reduce using rule 48 (closedStmt -> CONTINUE ; .)
    ID              reduce using rule 48 (closedStmt -> CONTINUE ; .)
    THIS            reduce using rule 48 (closedStmt -> CONTINUE ; .)
    SUPER           reduce using rule 48 (closedStmt -> CONTINUE ; .)
    (               reduce using rule 48 (closedStmt -> CONTINUE ; .)
    NEW             reduce using rule 48 (closedStmt -> CONTINUE ; .)
    INT_CONST       reduce using rule 48 (closedStmt -> CONTINUE ; .)
    FLOAT_CONST     reduce using rule 48 (closedStmt -> CONTINUE ; .)
    STRING_CONST    reduce using rule 48 (closedStmt -> CONTINUE ; .)
    NULL            reduce using rule 48 (closedStmt -> CONTINUE ; .)
    TRUE            reduce using rule 48 (closedStmt -> CONTINUE ; .)
    FALSE           reduce using rule 48 (closedStmt -> CONTINUE ; .)
    }               reduce using rule 48 (closedStmt -> CONTINUE ; .)


state 138

    (83) assign -> lhs = . expr
    (81) expr -> . assign
    (82) expr -> . p1
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (88) p1 -> . p1 BOOL_OR p2
    (89) p1 -> . p2
    (77) lhs -> . field_access
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary

    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110

    p2                             shift and go to state 118
    field_access                   shift and go to state 112
    p1                             shift and go to state 114
    p6                             shift and go to state 115
    p4                             shift and go to state 121
    p3                             shift and go to state 119
    expr                           shift and go to state 173
    p5                             shift and go to state 122
    primary                        shift and go to state 113
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 111
    assign                         shift and go to state 125
    p7                             shift and go to state 117

state 139

    (86) assign -> lhs MINUS_MINUS .

    )               reduce using rule 86 (assign -> lhs MINUS_MINUS .)
    ;               reduce using rule 86 (assign -> lhs MINUS_MINUS .)
    ,               reduce using rule 86 (assign -> lhs MINUS_MINUS .)


state 140

    (84) assign -> lhs PLUS_PLUS .

    )               reduce using rule 84 (assign -> lhs PLUS_PLUS .)
    ;               reduce using rule 84 (assign -> lhs PLUS_PLUS .)
    ,               reduce using rule 84 (assign -> lhs PLUS_PLUS .)


state 141

    (87) assign -> MINUS_MINUS lhs .
    (70) primary -> lhs .

    )               reduce using rule 87 (assign -> MINUS_MINUS lhs .)
    ;               reduce using rule 87 (assign -> MINUS_MINUS lhs .)
    ,               reduce using rule 87 (assign -> MINUS_MINUS lhs .)
    .               reduce using rule 70 (primary -> lhs .)


state 142

    (85) assign -> PLUS_PLUS lhs .
    (70) primary -> lhs .

    )               reduce using rule 85 (assign -> PLUS_PLUS lhs .)
    ;               reduce using rule 85 (assign -> PLUS_PLUS lhs .)
    ,               reduce using rule 85 (assign -> PLUS_PLUS lhs .)
    .               reduce using rule 70 (primary -> lhs .)


state 143

    (109) p7 -> primary .
    (78) field_access -> primary . . ID

    *               reduce using rule 109 (p7 -> primary .)
    /               reduce using rule 109 (p7 -> primary .)
    +               reduce using rule 109 (p7 -> primary .)
    -               reduce using rule 109 (p7 -> primary .)
    <               reduce using rule 109 (p7 -> primary .)
    >               reduce using rule 109 (p7 -> primary .)
    LESS_THAN_OR_EQUAL reduce using rule 109 (p7 -> primary .)
    GREATER_THAN_OR_EQUAL reduce using rule 109 (p7 -> primary .)
    EQUAL           reduce using rule 109 (p7 -> primary .)
    NOT_EQUAL       reduce using rule 109 (p7 -> primary .)
    BOOL_AND        reduce using rule 109 (p7 -> primary .)
    BOOL_OR         reduce using rule 109 (p7 -> primary .)
    ;               reduce using rule 109 (p7 -> primary .)
    )               reduce using rule 109 (p7 -> primary .)
    ,               reduce using rule 109 (p7 -> primary .)
    .               shift and go to state 127


state 144

    (106) p7 -> ! p7 .

    *               reduce using rule 106 (p7 -> ! p7 .)
    /               reduce using rule 106 (p7 -> ! p7 .)
    +               reduce using rule 106 (p7 -> ! p7 .)
    -               reduce using rule 106 (p7 -> ! p7 .)
    <               reduce using rule 106 (p7 -> ! p7 .)
    >               reduce using rule 106 (p7 -> ! p7 .)
    LESS_THAN_OR_EQUAL reduce using rule 106 (p7 -> ! p7 .)
    GREATER_THAN_OR_EQUAL reduce using rule 106 (p7 -> ! p7 .)
    EQUAL           reduce using rule 106 (p7 -> ! p7 .)
    NOT_EQUAL       reduce using rule 106 (p7 -> ! p7 .)
    BOOL_AND        reduce using rule 106 (p7 -> ! p7 .)
    BOOL_OR         reduce using rule 106 (p7 -> ! p7 .)
    ;               reduce using rule 106 (p7 -> ! p7 .)
    )               reduce using rule 106 (p7 -> ! p7 .)
    ,               reduce using rule 106 (p7 -> ! p7 .)


state 145

    (70) primary -> lhs .

    .               reduce using rule 70 (primary -> lhs .)
    *               reduce using rule 70 (primary -> lhs .)
    /               reduce using rule 70 (primary -> lhs .)
    +               reduce using rule 70 (primary -> lhs .)
    -               reduce using rule 70 (primary -> lhs .)
    <               reduce using rule 70 (primary -> lhs .)
    >               reduce using rule 70 (primary -> lhs .)
    LESS_THAN_OR_EQUAL reduce using rule 70 (primary -> lhs .)
    GREATER_THAN_OR_EQUAL reduce using rule 70 (primary -> lhs .)
    EQUAL           reduce using rule 70 (primary -> lhs .)
    NOT_EQUAL       reduce using rule 70 (primary -> lhs .)
    BOOL_AND        reduce using rule 70 (primary -> lhs .)
    BOOL_OR         reduce using rule 70 (primary -> lhs .)
    ;               reduce using rule 70 (primary -> lhs .)
    )               reduce using rule 70 (primary -> lhs .)
    ,               reduce using rule 70 (primary -> lhs .)


state 146

    (107) p7 -> + p7 .

    *               reduce using rule 107 (p7 -> + p7 .)
    /               reduce using rule 107 (p7 -> + p7 .)
    +               reduce using rule 107 (p7 -> + p7 .)
    -               reduce using rule 107 (p7 -> + p7 .)
    <               reduce using rule 107 (p7 -> + p7 .)
    >               reduce using rule 107 (p7 -> + p7 .)
    LESS_THAN_OR_EQUAL reduce using rule 107 (p7 -> + p7 .)
    GREATER_THAN_OR_EQUAL reduce using rule 107 (p7 -> + p7 .)
    EQUAL           reduce using rule 107 (p7 -> + p7 .)
    NOT_EQUAL       reduce using rule 107 (p7 -> + p7 .)
    BOOL_AND        reduce using rule 107 (p7 -> + p7 .)
    BOOL_OR         reduce using rule 107 (p7 -> + p7 .)
    ;               reduce using rule 107 (p7 -> + p7 .)
    )               reduce using rule 107 (p7 -> + p7 .)
    ,               reduce using rule 107 (p7 -> + p7 .)


state 147

    (108) p7 -> - p7 .

    *               reduce using rule 108 (p7 -> - p7 .)
    /               reduce using rule 108 (p7 -> - p7 .)
    +               reduce using rule 108 (p7 -> - p7 .)
    -               reduce using rule 108 (p7 -> - p7 .)
    <               reduce using rule 108 (p7 -> - p7 .)
    >               reduce using rule 108 (p7 -> - p7 .)
    LESS_THAN_OR_EQUAL reduce using rule 108 (p7 -> - p7 .)
    GREATER_THAN_OR_EQUAL reduce using rule 108 (p7 -> - p7 .)
    EQUAL           reduce using rule 108 (p7 -> - p7 .)
    NOT_EQUAL       reduce using rule 108 (p7 -> - p7 .)
    BOOL_AND        reduce using rule 108 (p7 -> - p7 .)
    BOOL_OR         reduce using rule 108 (p7 -> - p7 .)
    ;               reduce using rule 108 (p7 -> - p7 .)
    )               reduce using rule 108 (p7 -> - p7 .)
    ,               reduce using rule 108 (p7 -> - p7 .)


state 148

    (88) p1 -> p1 BOOL_OR . p2
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    p2                             shift and go to state 174
    p3                             shift and go to state 119
    p6                             shift and go to state 115
    p7                             shift and go to state 117
    p4                             shift and go to state 121
    p5                             shift and go to state 122
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111
    field_access                   shift and go to state 112

state 149

    (103) p6 -> p6 * . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    field_access                   shift and go to state 112
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111
    p7                             shift and go to state 175

state 150

    (104) p6 -> p6 / . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    field_access                   shift and go to state 112
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111
    p7                             shift and go to state 176

state 151

    (90) p2 -> p2 BOOL_AND . p3
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    p3                             shift and go to state 177
    p6                             shift and go to state 115
    p7                             shift and go to state 117
    p4                             shift and go to state 121
    p5                             shift and go to state 122
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111
    field_access                   shift and go to state 112

state 152

    (93) p3 -> p3 NOT_EQUAL . p4
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    p6                             shift and go to state 115
    p7                             shift and go to state 117
    p4                             shift and go to state 178
    p5                             shift and go to state 122
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111
    field_access                   shift and go to state 112

state 153

    (92) p3 -> p3 EQUAL . p4
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    p6                             shift and go to state 115
    p7                             shift and go to state 117
    p4                             shift and go to state 179
    p5                             shift and go to state 122
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111
    field_access                   shift and go to state 112

state 154

    (45) closedStmt -> RETURN placeholder12 ; .

    ELSE            reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    IF              reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    WHILE           reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    FOR             reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    RETURN          reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    BREAK           reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    CONTINUE        reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    ;               reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    {               reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    PLUS_PLUS       reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    MINUS_MINUS     reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    INT             reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    FLOAT           reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    BOOLEAN         reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    ID              reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    THIS            reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    SUPER           reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    (               reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    NEW             reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    INT_CONST       reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    FLOAT_CONST     reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    STRING_CONST    reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    NULL            reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    TRUE            reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    FALSE           reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)
    }               reduce using rule 45 (closedStmt -> RETURN placeholder12 ; .)


state 155

    (98) p4 -> p4 GREATER_THAN_OR_EQUAL . p5
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    field_access                   shift and go to state 112
    p6                             shift and go to state 115
    p7                             shift and go to state 117
    p5                             shift and go to state 180
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111

state 156

    (97) p4 -> p4 LESS_THAN_OR_EQUAL . p5
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    field_access                   shift and go to state 112
    p6                             shift and go to state 115
    p7                             shift and go to state 117
    p5                             shift and go to state 181
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111

state 157

    (95) p4 -> p4 < . p5
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    field_access                   shift and go to state 112
    p6                             shift and go to state 115
    p7                             shift and go to state 117
    p5                             shift and go to state 182
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111

state 158

    (96) p4 -> p4 > . p5
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    field_access                   shift and go to state 112
    p6                             shift and go to state 115
    p7                             shift and go to state 117
    p5                             shift and go to state 183
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111

state 159

    (101) p5 -> p5 - . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    field_access                   shift and go to state 112
    p6                             shift and go to state 184
    p7                             shift and go to state 117
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111

state 160

    (100) p5 -> p5 + . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (77) lhs -> . field_access
    (80) method_invocation -> . field_access ( placeholder14 )
    (78) field_access -> . primary . ID
    (79) field_access -> . ID

    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    ID              shift and go to state 116

    field_access                   shift and go to state 112
    p6                             shift and go to state 185
    p7                             shift and go to state 117
    primary                        shift and go to state 143
    literal                        shift and go to state 87
    lhs                            shift and go to state 145
    method_invocation              shift and go to state 111

state 161

    (72) placeholder14 -> arguments .

    )               reduce using rule 72 (placeholder14 -> arguments .)


state 162

    (73) placeholder14 -> empty .

    )               reduce using rule 73 (placeholder14 -> empty .)


state 163

    (80) method_invocation -> field_access ( placeholder14 . )

    )               shift and go to state 186


state 164

    (74) arguments -> expr . placeholder15
    (75) placeholder15 -> . , expr placeholder15
    (76) placeholder15 -> . empty
    (112) empty -> .

    ,               shift and go to state 188
    )               reduce using rule 112 (empty -> .)

    placeholder15                  shift and go to state 187
    empty                          shift and go to state 189

state 165

    (78) field_access -> primary . ID .

    (               reduce using rule 78 (field_access -> primary . ID .)
    .               reduce using rule 78 (field_access -> primary . ID .)
    *               reduce using rule 78 (field_access -> primary . ID .)
    /               reduce using rule 78 (field_access -> primary . ID .)
    +               reduce using rule 78 (field_access -> primary . ID .)
    -               reduce using rule 78 (field_access -> primary . ID .)
    <               reduce using rule 78 (field_access -> primary . ID .)
    >               reduce using rule 78 (field_access -> primary . ID .)
    LESS_THAN_OR_EQUAL reduce using rule 78 (field_access -> primary . ID .)
    GREATER_THAN_OR_EQUAL reduce using rule 78 (field_access -> primary . ID .)
    EQUAL           reduce using rule 78 (field_access -> primary . ID .)
    NOT_EQUAL       reduce using rule 78 (field_access -> primary . ID .)
    BOOL_AND        reduce using rule 78 (field_access -> primary . ID .)
    BOOL_OR         reduce using rule 78 (field_access -> primary . ID .)
    ;               reduce using rule 78 (field_access -> primary . ID .)
    )               reduce using rule 78 (field_access -> primary . ID .)
    ,               reduce using rule 78 (field_access -> primary . ID .)
    =               reduce using rule 78 (field_access -> primary . ID .)
    PLUS_PLUS       reduce using rule 78 (field_access -> primary . ID .)
    MINUS_MINUS     reduce using rule 78 (field_access -> primary . ID .)


state 166

    (43) openStmt -> WHILE ( expr . ) openStmt
    (53) closedStmt -> WHILE ( expr . ) closedStmt

    )               shift and go to state 190


state 167

    (69) primary -> NEW ID ( . placeholder14 )
    (72) placeholder14 -> . arguments
    (73) placeholder14 -> . empty
    (74) arguments -> . expr placeholder15
    (112) empty -> .
    (81) expr -> . assign
    (82) expr -> . p1
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (88) p1 -> . p1 BOOL_OR p2
    (89) p1 -> . p2
    (77) lhs -> . field_access
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary

    )               reduce using rule 112 (empty -> .)
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110

    p2                             shift and go to state 118
    field_access                   shift and go to state 112
    p1                             shift and go to state 114
    placeholder14                  shift and go to state 191
    p4                             shift and go to state 121
    p3                             shift and go to state 119
    expr                           shift and go to state 164
    p5                             shift and go to state 122
    primary                        shift and go to state 113
    p6                             shift and go to state 115
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    arguments                      shift and go to state 161
    method_invocation              shift and go to state 111
    assign                         shift and go to state 125
    empty                          shift and go to state 162
    p7                             shift and go to state 117

state 168

    (68) primary -> ( expr ) .

    .               reduce using rule 68 (primary -> ( expr ) .)
    *               reduce using rule 68 (primary -> ( expr ) .)
    /               reduce using rule 68 (primary -> ( expr ) .)
    +               reduce using rule 68 (primary -> ( expr ) .)
    -               reduce using rule 68 (primary -> ( expr ) .)
    <               reduce using rule 68 (primary -> ( expr ) .)
    >               reduce using rule 68 (primary -> ( expr ) .)
    LESS_THAN_OR_EQUAL reduce using rule 68 (primary -> ( expr ) .)
    GREATER_THAN_OR_EQUAL reduce using rule 68 (primary -> ( expr ) .)
    EQUAL           reduce using rule 68 (primary -> ( expr ) .)
    NOT_EQUAL       reduce using rule 68 (primary -> ( expr ) .)
    BOOL_AND        reduce using rule 68 (primary -> ( expr ) .)
    BOOL_OR         reduce using rule 68 (primary -> ( expr ) .)
    ;               reduce using rule 68 (primary -> ( expr ) .)
    )               reduce using rule 68 (primary -> ( expr ) .)
    ,               reduce using rule 68 (primary -> ( expr ) .)


state 169

    (55) placeholder11 -> stmt_expr .

    )               reduce using rule 55 (placeholder11 -> stmt_expr .)
    ;               reduce using rule 55 (placeholder11 -> stmt_expr .)


state 170

    (44) openStmt -> FOR ( placeholder11 . ; placeholder12 ; placeholder11 ) openStmt
    (54) closedStmt -> FOR ( placeholder11 . ; placeholder12 ; placeholder11 ) closedStmt

    ;               shift and go to state 192


state 171

    (56) placeholder11 -> empty .

    )               reduce using rule 56 (placeholder11 -> empty .)
    ;               reduce using rule 56 (placeholder11 -> empty .)


state 172

    (41) openStmt -> IF ( expr . ) stmt
    (42) openStmt -> IF ( expr . ) closedStmt ELSE openStmt
    (52) closedStmt -> IF ( expr . ) closedStmt ELSE closedStmt

    )               shift and go to state 193


state 173

    (83) assign -> lhs = expr .

    )               reduce using rule 83 (assign -> lhs = expr .)
    ;               reduce using rule 83 (assign -> lhs = expr .)
    ,               reduce using rule 83 (assign -> lhs = expr .)


state 174

    (88) p1 -> p1 BOOL_OR p2 .
    (90) p2 -> p2 . BOOL_AND p3

    BOOL_OR         reduce using rule 88 (p1 -> p1 BOOL_OR p2 .)
    )               reduce using rule 88 (p1 -> p1 BOOL_OR p2 .)
    ;               reduce using rule 88 (p1 -> p1 BOOL_OR p2 .)
    ,               reduce using rule 88 (p1 -> p1 BOOL_OR p2 .)
    BOOL_AND        shift and go to state 151


state 175

    (103) p6 -> p6 * p7 .

    *               reduce using rule 103 (p6 -> p6 * p7 .)
    /               reduce using rule 103 (p6 -> p6 * p7 .)
    +               reduce using rule 103 (p6 -> p6 * p7 .)
    -               reduce using rule 103 (p6 -> p6 * p7 .)
    <               reduce using rule 103 (p6 -> p6 * p7 .)
    >               reduce using rule 103 (p6 -> p6 * p7 .)
    LESS_THAN_OR_EQUAL reduce using rule 103 (p6 -> p6 * p7 .)
    GREATER_THAN_OR_EQUAL reduce using rule 103 (p6 -> p6 * p7 .)
    EQUAL           reduce using rule 103 (p6 -> p6 * p7 .)
    NOT_EQUAL       reduce using rule 103 (p6 -> p6 * p7 .)
    BOOL_AND        reduce using rule 103 (p6 -> p6 * p7 .)
    BOOL_OR         reduce using rule 103 (p6 -> p6 * p7 .)
    ;               reduce using rule 103 (p6 -> p6 * p7 .)
    )               reduce using rule 103 (p6 -> p6 * p7 .)
    ,               reduce using rule 103 (p6 -> p6 * p7 .)


state 176

    (104) p6 -> p6 / p7 .

    *               reduce using rule 104 (p6 -> p6 / p7 .)
    /               reduce using rule 104 (p6 -> p6 / p7 .)
    +               reduce using rule 104 (p6 -> p6 / p7 .)
    -               reduce using rule 104 (p6 -> p6 / p7 .)
    <               reduce using rule 104 (p6 -> p6 / p7 .)
    >               reduce using rule 104 (p6 -> p6 / p7 .)
    LESS_THAN_OR_EQUAL reduce using rule 104 (p6 -> p6 / p7 .)
    GREATER_THAN_OR_EQUAL reduce using rule 104 (p6 -> p6 / p7 .)
    EQUAL           reduce using rule 104 (p6 -> p6 / p7 .)
    NOT_EQUAL       reduce using rule 104 (p6 -> p6 / p7 .)
    BOOL_AND        reduce using rule 104 (p6 -> p6 / p7 .)
    BOOL_OR         reduce using rule 104 (p6 -> p6 / p7 .)
    ;               reduce using rule 104 (p6 -> p6 / p7 .)
    )               reduce using rule 104 (p6 -> p6 / p7 .)
    ,               reduce using rule 104 (p6 -> p6 / p7 .)


state 177

    (90) p2 -> p2 BOOL_AND p3 .
    (92) p3 -> p3 . EQUAL p4
    (93) p3 -> p3 . NOT_EQUAL p4

    BOOL_AND        reduce using rule 90 (p2 -> p2 BOOL_AND p3 .)
    BOOL_OR         reduce using rule 90 (p2 -> p2 BOOL_AND p3 .)
    )               reduce using rule 90 (p2 -> p2 BOOL_AND p3 .)
    ,               reduce using rule 90 (p2 -> p2 BOOL_AND p3 .)
    ;               reduce using rule 90 (p2 -> p2 BOOL_AND p3 .)
    EQUAL           shift and go to state 153
    NOT_EQUAL       shift and go to state 152


state 178

    (93) p3 -> p3 NOT_EQUAL p4 .
    (95) p4 -> p4 . < p5
    (96) p4 -> p4 . > p5
    (97) p4 -> p4 . LESS_THAN_OR_EQUAL p5
    (98) p4 -> p4 . GREATER_THAN_OR_EQUAL p5

    EQUAL           reduce using rule 93 (p3 -> p3 NOT_EQUAL p4 .)
    NOT_EQUAL       reduce using rule 93 (p3 -> p3 NOT_EQUAL p4 .)
    BOOL_AND        reduce using rule 93 (p3 -> p3 NOT_EQUAL p4 .)
    BOOL_OR         reduce using rule 93 (p3 -> p3 NOT_EQUAL p4 .)
    )               reduce using rule 93 (p3 -> p3 NOT_EQUAL p4 .)
    ,               reduce using rule 93 (p3 -> p3 NOT_EQUAL p4 .)
    ;               reduce using rule 93 (p3 -> p3 NOT_EQUAL p4 .)
    <               shift and go to state 157
    >               shift and go to state 158
    LESS_THAN_OR_EQUAL shift and go to state 156
    GREATER_THAN_OR_EQUAL shift and go to state 155


state 179

    (92) p3 -> p3 EQUAL p4 .
    (95) p4 -> p4 . < p5
    (96) p4 -> p4 . > p5
    (97) p4 -> p4 . LESS_THAN_OR_EQUAL p5
    (98) p4 -> p4 . GREATER_THAN_OR_EQUAL p5

    EQUAL           reduce using rule 92 (p3 -> p3 EQUAL p4 .)
    NOT_EQUAL       reduce using rule 92 (p3 -> p3 EQUAL p4 .)
    BOOL_AND        reduce using rule 92 (p3 -> p3 EQUAL p4 .)
    BOOL_OR         reduce using rule 92 (p3 -> p3 EQUAL p4 .)
    )               reduce using rule 92 (p3 -> p3 EQUAL p4 .)
    ,               reduce using rule 92 (p3 -> p3 EQUAL p4 .)
    ;               reduce using rule 92 (p3 -> p3 EQUAL p4 .)
    <               shift and go to state 157
    >               shift and go to state 158
    LESS_THAN_OR_EQUAL shift and go to state 156
    GREATER_THAN_OR_EQUAL shift and go to state 155


state 180

    (98) p4 -> p4 GREATER_THAN_OR_EQUAL p5 .
    (100) p5 -> p5 . + p6
    (101) p5 -> p5 . - p6

    <               reduce using rule 98 (p4 -> p4 GREATER_THAN_OR_EQUAL p5 .)
    >               reduce using rule 98 (p4 -> p4 GREATER_THAN_OR_EQUAL p5 .)
    LESS_THAN_OR_EQUAL reduce using rule 98 (p4 -> p4 GREATER_THAN_OR_EQUAL p5 .)
    GREATER_THAN_OR_EQUAL reduce using rule 98 (p4 -> p4 GREATER_THAN_OR_EQUAL p5 .)
    EQUAL           reduce using rule 98 (p4 -> p4 GREATER_THAN_OR_EQUAL p5 .)
    NOT_EQUAL       reduce using rule 98 (p4 -> p4 GREATER_THAN_OR_EQUAL p5 .)
    BOOL_AND        reduce using rule 98 (p4 -> p4 GREATER_THAN_OR_EQUAL p5 .)
    BOOL_OR         reduce using rule 98 (p4 -> p4 GREATER_THAN_OR_EQUAL p5 .)
    ;               reduce using rule 98 (p4 -> p4 GREATER_THAN_OR_EQUAL p5 .)
    )               reduce using rule 98 (p4 -> p4 GREATER_THAN_OR_EQUAL p5 .)
    ,               reduce using rule 98 (p4 -> p4 GREATER_THAN_OR_EQUAL p5 .)
    +               shift and go to state 160
    -               shift and go to state 159


state 181

    (97) p4 -> p4 LESS_THAN_OR_EQUAL p5 .
    (100) p5 -> p5 . + p6
    (101) p5 -> p5 . - p6

    <               reduce using rule 97 (p4 -> p4 LESS_THAN_OR_EQUAL p5 .)
    >               reduce using rule 97 (p4 -> p4 LESS_THAN_OR_EQUAL p5 .)
    LESS_THAN_OR_EQUAL reduce using rule 97 (p4 -> p4 LESS_THAN_OR_EQUAL p5 .)
    GREATER_THAN_OR_EQUAL reduce using rule 97 (p4 -> p4 LESS_THAN_OR_EQUAL p5 .)
    EQUAL           reduce using rule 97 (p4 -> p4 LESS_THAN_OR_EQUAL p5 .)
    NOT_EQUAL       reduce using rule 97 (p4 -> p4 LESS_THAN_OR_EQUAL p5 .)
    BOOL_AND        reduce using rule 97 (p4 -> p4 LESS_THAN_OR_EQUAL p5 .)
    BOOL_OR         reduce using rule 97 (p4 -> p4 LESS_THAN_OR_EQUAL p5 .)
    ;               reduce using rule 97 (p4 -> p4 LESS_THAN_OR_EQUAL p5 .)
    )               reduce using rule 97 (p4 -> p4 LESS_THAN_OR_EQUAL p5 .)
    ,               reduce using rule 97 (p4 -> p4 LESS_THAN_OR_EQUAL p5 .)
    +               shift and go to state 160
    -               shift and go to state 159


state 182

    (95) p4 -> p4 < p5 .
    (100) p5 -> p5 . + p6
    (101) p5 -> p5 . - p6

    <               reduce using rule 95 (p4 -> p4 < p5 .)
    >               reduce using rule 95 (p4 -> p4 < p5 .)
    LESS_THAN_OR_EQUAL reduce using rule 95 (p4 -> p4 < p5 .)
    GREATER_THAN_OR_EQUAL reduce using rule 95 (p4 -> p4 < p5 .)
    EQUAL           reduce using rule 95 (p4 -> p4 < p5 .)
    NOT_EQUAL       reduce using rule 95 (p4 -> p4 < p5 .)
    BOOL_AND        reduce using rule 95 (p4 -> p4 < p5 .)
    BOOL_OR         reduce using rule 95 (p4 -> p4 < p5 .)
    ;               reduce using rule 95 (p4 -> p4 < p5 .)
    )               reduce using rule 95 (p4 -> p4 < p5 .)
    ,               reduce using rule 95 (p4 -> p4 < p5 .)
    +               shift and go to state 160
    -               shift and go to state 159


state 183

    (96) p4 -> p4 > p5 .
    (100) p5 -> p5 . + p6
    (101) p5 -> p5 . - p6

    <               reduce using rule 96 (p4 -> p4 > p5 .)
    >               reduce using rule 96 (p4 -> p4 > p5 .)
    LESS_THAN_OR_EQUAL reduce using rule 96 (p4 -> p4 > p5 .)
    GREATER_THAN_OR_EQUAL reduce using rule 96 (p4 -> p4 > p5 .)
    EQUAL           reduce using rule 96 (p4 -> p4 > p5 .)
    NOT_EQUAL       reduce using rule 96 (p4 -> p4 > p5 .)
    BOOL_AND        reduce using rule 96 (p4 -> p4 > p5 .)
    BOOL_OR         reduce using rule 96 (p4 -> p4 > p5 .)
    ;               reduce using rule 96 (p4 -> p4 > p5 .)
    )               reduce using rule 96 (p4 -> p4 > p5 .)
    ,               reduce using rule 96 (p4 -> p4 > p5 .)
    +               shift and go to state 160
    -               shift and go to state 159


state 184

    (101) p5 -> p5 - p6 .
    (103) p6 -> p6 . * p7
    (104) p6 -> p6 . / p7

    +               reduce using rule 101 (p5 -> p5 - p6 .)
    -               reduce using rule 101 (p5 -> p5 - p6 .)
    <               reduce using rule 101 (p5 -> p5 - p6 .)
    >               reduce using rule 101 (p5 -> p5 - p6 .)
    LESS_THAN_OR_EQUAL reduce using rule 101 (p5 -> p5 - p6 .)
    GREATER_THAN_OR_EQUAL reduce using rule 101 (p5 -> p5 - p6 .)
    EQUAL           reduce using rule 101 (p5 -> p5 - p6 .)
    NOT_EQUAL       reduce using rule 101 (p5 -> p5 - p6 .)
    BOOL_AND        reduce using rule 101 (p5 -> p5 - p6 .)
    BOOL_OR         reduce using rule 101 (p5 -> p5 - p6 .)
    ;               reduce using rule 101 (p5 -> p5 - p6 .)
    )               reduce using rule 101 (p5 -> p5 - p6 .)
    ,               reduce using rule 101 (p5 -> p5 - p6 .)
    *               shift and go to state 149
    /               shift and go to state 150


state 185

    (100) p5 -> p5 + p6 .
    (103) p6 -> p6 . * p7
    (104) p6 -> p6 . / p7

    +               reduce using rule 100 (p5 -> p5 + p6 .)
    -               reduce using rule 100 (p5 -> p5 + p6 .)
    <               reduce using rule 100 (p5 -> p5 + p6 .)
    >               reduce using rule 100 (p5 -> p5 + p6 .)
    LESS_THAN_OR_EQUAL reduce using rule 100 (p5 -> p5 + p6 .)
    GREATER_THAN_OR_EQUAL reduce using rule 100 (p5 -> p5 + p6 .)
    EQUAL           reduce using rule 100 (p5 -> p5 + p6 .)
    NOT_EQUAL       reduce using rule 100 (p5 -> p5 + p6 .)
    BOOL_AND        reduce using rule 100 (p5 -> p5 + p6 .)
    BOOL_OR         reduce using rule 100 (p5 -> p5 + p6 .)
    ;               reduce using rule 100 (p5 -> p5 + p6 .)
    )               reduce using rule 100 (p5 -> p5 + p6 .)
    ,               reduce using rule 100 (p5 -> p5 + p6 .)
    *               shift and go to state 149
    /               shift and go to state 150


state 186

    (80) method_invocation -> field_access ( placeholder14 ) .

    .               reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    *               reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    /               reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    +               reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    -               reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    <               reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    >               reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    LESS_THAN_OR_EQUAL reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    GREATER_THAN_OR_EQUAL reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    EQUAL           reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    NOT_EQUAL       reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    BOOL_AND        reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    BOOL_OR         reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    )               reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    ;               reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)
    ,               reduce using rule 80 (method_invocation -> field_access ( placeholder14 ) .)


state 187

    (74) arguments -> expr placeholder15 .

    )               reduce using rule 74 (arguments -> expr placeholder15 .)


state 188

    (75) placeholder15 -> , . expr placeholder15
    (81) expr -> . assign
    (82) expr -> . p1
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (88) p1 -> . p1 BOOL_OR p2
    (89) p1 -> . p2
    (77) lhs -> . field_access
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary

    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110

    p2                             shift and go to state 118
    field_access                   shift and go to state 112
    p1                             shift and go to state 114
    p4                             shift and go to state 121
    p3                             shift and go to state 119
    expr                           shift and go to state 194
    p5                             shift and go to state 122
    primary                        shift and go to state 113
    p6                             shift and go to state 115
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 111
    assign                         shift and go to state 125
    p7                             shift and go to state 117

state 189

    (76) placeholder15 -> empty .

    )               reduce using rule 76 (placeholder15 -> empty .)


state 190

    (43) openStmt -> WHILE ( expr ) . openStmt
    (53) closedStmt -> WHILE ( expr ) . closedStmt
    (41) openStmt -> . IF ( expr ) stmt
    (42) openStmt -> . IF ( expr ) closedStmt ELSE openStmt
    (43) openStmt -> . WHILE ( expr ) openStmt
    (44) openStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (45) closedStmt -> . RETURN placeholder12 ;
    (46) closedStmt -> . stmt_expr ;
    (47) closedStmt -> . BREAK ;
    (48) closedStmt -> . CONTINUE ;
    (49) closedStmt -> . var_decl
    (50) closedStmt -> . ;
    (51) closedStmt -> . block
    (52) closedStmt -> . IF ( expr ) closedStmt ELSE closedStmt
    (53) closedStmt -> . WHILE ( expr ) closedStmt
    (54) closedStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (18) var_decl -> . type variables
    (36) block -> . { placeholder9 }
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    IF              shift and go to state 96
    WHILE           shift and go to state 76
    FOR             shift and go to state 93
    RETURN          shift and go to state 73
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 101
    ;               shift and go to state 89
    {               shift and go to state 68
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 85
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    closedStmt                     shift and go to state 195
    stmt_expr                      shift and go to state 86
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    var_decl                       shift and go to state 98
    method_invocation              shift and go to state 88
    openStmt                       shift and go to state 196
    type                           shift and go to state 90
    assign                         shift and go to state 106
    block                          shift and go to state 107

state 191

    (69) primary -> NEW ID ( placeholder14 . )

    )               shift and go to state 197


state 192

    (44) openStmt -> FOR ( placeholder11 ; . placeholder12 ; placeholder11 ) openStmt
    (54) closedStmt -> FOR ( placeholder11 ; . placeholder12 ; placeholder11 ) closedStmt
    (57) placeholder12 -> . expr
    (58) placeholder12 -> . empty
    (81) expr -> . assign
    (82) expr -> . p1
    (112) empty -> .
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (88) p1 -> . p1 BOOL_OR p2
    (89) p1 -> . p2
    (77) lhs -> . field_access
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary

    ;               reduce using rule 112 (empty -> .)
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110

    p2                             shift and go to state 118
    placeholder12                  shift and go to state 198
    p6                             shift and go to state 115
    p4                             shift and go to state 121
    field_access                   shift and go to state 112
    expr                           shift and go to state 123
    p5                             shift and go to state 122
    primary                        shift and go to state 113
    p3                             shift and go to state 119
    literal                        shift and go to state 87
    p1                             shift and go to state 114
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 111
    assign                         shift and go to state 125
    empty                          shift and go to state 124
    p7                             shift and go to state 117

state 193

    (41) openStmt -> IF ( expr ) . stmt
    (42) openStmt -> IF ( expr ) . closedStmt ELSE openStmt
    (52) closedStmt -> IF ( expr ) . closedStmt ELSE closedStmt
    (39) stmt -> . openStmt
    (40) stmt -> . closedStmt
    (45) closedStmt -> . RETURN placeholder12 ;
    (46) closedStmt -> . stmt_expr ;
    (47) closedStmt -> . BREAK ;
    (48) closedStmt -> . CONTINUE ;
    (49) closedStmt -> . var_decl
    (50) closedStmt -> . ;
    (51) closedStmt -> . block
    (52) closedStmt -> . IF ( expr ) closedStmt ELSE closedStmt
    (53) closedStmt -> . WHILE ( expr ) closedStmt
    (54) closedStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (41) openStmt -> . IF ( expr ) stmt
    (42) openStmt -> . IF ( expr ) closedStmt ELSE openStmt
    (43) openStmt -> . WHILE ( expr ) openStmt
    (44) openStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (18) var_decl -> . type variables
    (36) block -> . { placeholder9 }
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    RETURN          shift and go to state 73
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 101
    ;               shift and go to state 89
    IF              shift and go to state 203
    WHILE           shift and go to state 199
    FOR             shift and go to state 201
    {               shift and go to state 68
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 85
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    stmt                           shift and go to state 202
    closedStmt                     shift and go to state 200
    stmt_expr                      shift and go to state 86
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    var_decl                       shift and go to state 98
    method_invocation              shift and go to state 88
    openStmt                       shift and go to state 105
    type                           shift and go to state 90
    assign                         shift and go to state 106
    block                          shift and go to state 107

state 194

    (75) placeholder15 -> , expr . placeholder15
    (75) placeholder15 -> . , expr placeholder15
    (76) placeholder15 -> . empty
    (112) empty -> .

    ,               shift and go to state 188
    )               reduce using rule 112 (empty -> .)

    placeholder15                  shift and go to state 204
    empty                          shift and go to state 189

state 195

    (53) closedStmt -> WHILE ( expr ) closedStmt .

    ELSE            reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    IF              reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    WHILE           reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    FOR             reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    RETURN          reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    BREAK           reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    CONTINUE        reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    ;               reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    {               reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    PLUS_PLUS       reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    MINUS_MINUS     reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    INT             reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    FLOAT           reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    BOOLEAN         reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    ID              reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    THIS            reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    SUPER           reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    (               reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    NEW             reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    INT_CONST       reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    FLOAT_CONST     reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    STRING_CONST    reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    NULL            reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    TRUE            reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    FALSE           reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)
    }               reduce using rule 53 (closedStmt -> WHILE ( expr ) closedStmt .)


state 196

    (43) openStmt -> WHILE ( expr ) openStmt .

    IF              reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    WHILE           reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    FOR             reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    RETURN          reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    BREAK           reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    CONTINUE        reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    ;               reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    {               reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    PLUS_PLUS       reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    MINUS_MINUS     reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    INT             reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    FLOAT           reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    BOOLEAN         reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    ID              reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    THIS            reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    SUPER           reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    (               reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    NEW             reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    INT_CONST       reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    FLOAT_CONST     reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    STRING_CONST    reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    NULL            reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    TRUE            reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    FALSE           reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)
    }               reduce using rule 43 (openStmt -> WHILE ( expr ) openStmt .)


state 197

    (69) primary -> NEW ID ( placeholder14 ) .

    .               reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    *               reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    /               reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    +               reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    -               reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    <               reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    >               reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    LESS_THAN_OR_EQUAL reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    GREATER_THAN_OR_EQUAL reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    EQUAL           reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    NOT_EQUAL       reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    BOOL_AND        reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    BOOL_OR         reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    ;               reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    )               reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)
    ,               reduce using rule 69 (primary -> NEW ID ( placeholder14 ) .)


state 198

    (44) openStmt -> FOR ( placeholder11 ; placeholder12 . ; placeholder11 ) openStmt
    (54) closedStmt -> FOR ( placeholder11 ; placeholder12 . ; placeholder11 ) closedStmt

    ;               shift and go to state 205


state 199

    (53) closedStmt -> WHILE . ( expr ) closedStmt
    (43) openStmt -> WHILE . ( expr ) openStmt

    (               shift and go to state 206


state 200

    (42) openStmt -> IF ( expr ) closedStmt . ELSE openStmt
    (52) closedStmt -> IF ( expr ) closedStmt . ELSE closedStmt
    (40) stmt -> closedStmt .

    ELSE            shift and go to state 207
    IF              reduce using rule 40 (stmt -> closedStmt .)
    WHILE           reduce using rule 40 (stmt -> closedStmt .)
    FOR             reduce using rule 40 (stmt -> closedStmt .)
    RETURN          reduce using rule 40 (stmt -> closedStmt .)
    BREAK           reduce using rule 40 (stmt -> closedStmt .)
    CONTINUE        reduce using rule 40 (stmt -> closedStmt .)
    ;               reduce using rule 40 (stmt -> closedStmt .)
    {               reduce using rule 40 (stmt -> closedStmt .)
    PLUS_PLUS       reduce using rule 40 (stmt -> closedStmt .)
    MINUS_MINUS     reduce using rule 40 (stmt -> closedStmt .)
    INT             reduce using rule 40 (stmt -> closedStmt .)
    FLOAT           reduce using rule 40 (stmt -> closedStmt .)
    BOOLEAN         reduce using rule 40 (stmt -> closedStmt .)
    ID              reduce using rule 40 (stmt -> closedStmt .)
    THIS            reduce using rule 40 (stmt -> closedStmt .)
    SUPER           reduce using rule 40 (stmt -> closedStmt .)
    (               reduce using rule 40 (stmt -> closedStmt .)
    NEW             reduce using rule 40 (stmt -> closedStmt .)
    INT_CONST       reduce using rule 40 (stmt -> closedStmt .)
    FLOAT_CONST     reduce using rule 40 (stmt -> closedStmt .)
    STRING_CONST    reduce using rule 40 (stmt -> closedStmt .)
    NULL            reduce using rule 40 (stmt -> closedStmt .)
    TRUE            reduce using rule 40 (stmt -> closedStmt .)
    FALSE           reduce using rule 40 (stmt -> closedStmt .)
    }               reduce using rule 40 (stmt -> closedStmt .)


state 201

    (54) closedStmt -> FOR . ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (44) openStmt -> FOR . ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt

    (               shift and go to state 208


state 202

    (41) openStmt -> IF ( expr ) stmt .

    IF              reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    WHILE           reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    FOR             reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    RETURN          reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    BREAK           reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    CONTINUE        reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    ;               reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    {               reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    PLUS_PLUS       reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    MINUS_MINUS     reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    INT             reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    FLOAT           reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    BOOLEAN         reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    ID              reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    THIS            reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    SUPER           reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    (               reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    NEW             reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    INT_CONST       reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    FLOAT_CONST     reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    STRING_CONST    reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    NULL            reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    TRUE            reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    FALSE           reduce using rule 41 (openStmt -> IF ( expr ) stmt .)
    }               reduce using rule 41 (openStmt -> IF ( expr ) stmt .)


state 203

    (52) closedStmt -> IF . ( expr ) closedStmt ELSE closedStmt
    (41) openStmt -> IF . ( expr ) stmt
    (42) openStmt -> IF . ( expr ) closedStmt ELSE openStmt

    (               shift and go to state 209


state 204

    (75) placeholder15 -> , expr placeholder15 .

    )               reduce using rule 75 (placeholder15 -> , expr placeholder15 .)


state 205

    (44) openStmt -> FOR ( placeholder11 ; placeholder12 ; . placeholder11 ) openStmt
    (54) closedStmt -> FOR ( placeholder11 ; placeholder12 ; . placeholder11 ) closedStmt
    (55) placeholder11 -> . stmt_expr
    (56) placeholder11 -> . empty
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (112) empty -> .
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    )               reduce using rule 112 (empty -> .)
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    placeholder11                  shift and go to state 210
    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    stmt_expr                      shift and go to state 169
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 88
    assign                         shift and go to state 106
    empty                          shift and go to state 171

state 206

    (53) closedStmt -> WHILE ( . expr ) closedStmt
    (43) openStmt -> WHILE ( . expr ) openStmt
    (81) expr -> . assign
    (82) expr -> . p1
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (88) p1 -> . p1 BOOL_OR p2
    (89) p1 -> . p2
    (77) lhs -> . field_access
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary

    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110

    p2                             shift and go to state 118
    field_access                   shift and go to state 112
    p1                             shift and go to state 114
    p6                             shift and go to state 115
    p4                             shift and go to state 121
    p3                             shift and go to state 119
    expr                           shift and go to state 211
    p5                             shift and go to state 122
    primary                        shift and go to state 113
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 111
    assign                         shift and go to state 125
    p7                             shift and go to state 117

state 207

    (42) openStmt -> IF ( expr ) closedStmt ELSE . openStmt
    (52) closedStmt -> IF ( expr ) closedStmt ELSE . closedStmt
    (41) openStmt -> . IF ( expr ) stmt
    (42) openStmt -> . IF ( expr ) closedStmt ELSE openStmt
    (43) openStmt -> . WHILE ( expr ) openStmt
    (44) openStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (45) closedStmt -> . RETURN placeholder12 ;
    (46) closedStmt -> . stmt_expr ;
    (47) closedStmt -> . BREAK ;
    (48) closedStmt -> . CONTINUE ;
    (49) closedStmt -> . var_decl
    (50) closedStmt -> . ;
    (51) closedStmt -> . block
    (52) closedStmt -> . IF ( expr ) closedStmt ELSE closedStmt
    (53) closedStmt -> . WHILE ( expr ) closedStmt
    (54) closedStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (18) var_decl -> . type variables
    (36) block -> . { placeholder9 }
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    IF              shift and go to state 96
    WHILE           shift and go to state 76
    FOR             shift and go to state 93
    RETURN          shift and go to state 73
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 101
    ;               shift and go to state 89
    {               shift and go to state 68
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 85
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    closedStmt                     shift and go to state 212
    stmt_expr                      shift and go to state 86
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    var_decl                       shift and go to state 98
    method_invocation              shift and go to state 88
    openStmt                       shift and go to state 213
    type                           shift and go to state 90
    assign                         shift and go to state 106
    block                          shift and go to state 107

state 208

    (54) closedStmt -> FOR ( . placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (44) openStmt -> FOR ( . placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (55) placeholder11 -> . stmt_expr
    (56) placeholder11 -> . empty
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (112) empty -> .
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    ;               reduce using rule 112 (empty -> .)
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    placeholder11                  shift and go to state 214
    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    stmt_expr                      shift and go to state 169
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 88
    assign                         shift and go to state 106
    empty                          shift and go to state 171

state 209

    (52) closedStmt -> IF ( . expr ) closedStmt ELSE closedStmt
    (41) openStmt -> IF ( . expr ) stmt
    (42) openStmt -> IF ( . expr ) closedStmt ELSE openStmt
    (81) expr -> . assign
    (82) expr -> . p1
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (88) p1 -> . p1 BOOL_OR p2
    (89) p1 -> . p2
    (77) lhs -> . field_access
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary

    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110

    p2                             shift and go to state 118
    field_access                   shift and go to state 112
    p1                             shift and go to state 114
    p6                             shift and go to state 115
    p4                             shift and go to state 121
    p3                             shift and go to state 119
    expr                           shift and go to state 215
    p5                             shift and go to state 122
    primary                        shift and go to state 113
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 111
    assign                         shift and go to state 125
    p7                             shift and go to state 117

state 210

    (44) openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 . ) openStmt
    (54) closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 . ) closedStmt

    )               shift and go to state 216


state 211

    (53) closedStmt -> WHILE ( expr . ) closedStmt
    (43) openStmt -> WHILE ( expr . ) openStmt

    )               shift and go to state 217


state 212

    (52) closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .

    ELSE            reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    IF              reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    WHILE           reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    FOR             reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    RETURN          reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    BREAK           reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    CONTINUE        reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    ;               reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    {               reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    PLUS_PLUS       reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    MINUS_MINUS     reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    INT             reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    FLOAT           reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    BOOLEAN         reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    ID              reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    THIS            reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    SUPER           reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    (               reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    NEW             reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    INT_CONST       reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    FLOAT_CONST     reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    STRING_CONST    reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    NULL            reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    TRUE            reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    FALSE           reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)
    }               reduce using rule 52 (closedStmt -> IF ( expr ) closedStmt ELSE closedStmt .)


state 213

    (42) openStmt -> IF ( expr ) closedStmt ELSE openStmt .

    IF              reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    WHILE           reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    FOR             reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    RETURN          reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    BREAK           reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    CONTINUE        reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    ;               reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    {               reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    PLUS_PLUS       reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    MINUS_MINUS     reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    INT             reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    FLOAT           reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    BOOLEAN         reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    ID              reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    THIS            reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    SUPER           reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    (               reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    NEW             reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    INT_CONST       reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    FLOAT_CONST     reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    STRING_CONST    reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    NULL            reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    TRUE            reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    FALSE           reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)
    }               reduce using rule 42 (openStmt -> IF ( expr ) closedStmt ELSE openStmt .)


state 214

    (54) closedStmt -> FOR ( placeholder11 . ; placeholder12 ; placeholder11 ) closedStmt
    (44) openStmt -> FOR ( placeholder11 . ; placeholder12 ; placeholder11 ) openStmt

    ;               shift and go to state 218


state 215

    (52) closedStmt -> IF ( expr . ) closedStmt ELSE closedStmt
    (41) openStmt -> IF ( expr . ) stmt
    (42) openStmt -> IF ( expr . ) closedStmt ELSE openStmt

    )               shift and go to state 219


state 216

    (44) openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) . openStmt
    (54) closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) . closedStmt
    (41) openStmt -> . IF ( expr ) stmt
    (42) openStmt -> . IF ( expr ) closedStmt ELSE openStmt
    (43) openStmt -> . WHILE ( expr ) openStmt
    (44) openStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (45) closedStmt -> . RETURN placeholder12 ;
    (46) closedStmt -> . stmt_expr ;
    (47) closedStmt -> . BREAK ;
    (48) closedStmt -> . CONTINUE ;
    (49) closedStmt -> . var_decl
    (50) closedStmt -> . ;
    (51) closedStmt -> . block
    (52) closedStmt -> . IF ( expr ) closedStmt ELSE closedStmt
    (53) closedStmt -> . WHILE ( expr ) closedStmt
    (54) closedStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (18) var_decl -> . type variables
    (36) block -> . { placeholder9 }
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    IF              shift and go to state 96
    WHILE           shift and go to state 76
    FOR             shift and go to state 93
    RETURN          shift and go to state 73
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 101
    ;               shift and go to state 89
    {               shift and go to state 68
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 85
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    closedStmt                     shift and go to state 220
    stmt_expr                      shift and go to state 86
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    var_decl                       shift and go to state 98
    method_invocation              shift and go to state 88
    openStmt                       shift and go to state 221
    type                           shift and go to state 90
    assign                         shift and go to state 106
    block                          shift and go to state 107

state 217

    (53) closedStmt -> WHILE ( expr ) . closedStmt
    (43) openStmt -> WHILE ( expr ) . openStmt
    (45) closedStmt -> . RETURN placeholder12 ;
    (46) closedStmt -> . stmt_expr ;
    (47) closedStmt -> . BREAK ;
    (48) closedStmt -> . CONTINUE ;
    (49) closedStmt -> . var_decl
    (50) closedStmt -> . ;
    (51) closedStmt -> . block
    (52) closedStmt -> . IF ( expr ) closedStmt ELSE closedStmt
    (53) closedStmt -> . WHILE ( expr ) closedStmt
    (54) closedStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (41) openStmt -> . IF ( expr ) stmt
    (42) openStmt -> . IF ( expr ) closedStmt ELSE openStmt
    (43) openStmt -> . WHILE ( expr ) openStmt
    (44) openStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (18) var_decl -> . type variables
    (36) block -> . { placeholder9 }
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    RETURN          shift and go to state 73
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 101
    ;               shift and go to state 89
    IF              shift and go to state 203
    WHILE           shift and go to state 199
    FOR             shift and go to state 201
    {               shift and go to state 68
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 85
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    var_decl                       shift and go to state 98
    closedStmt                     shift and go to state 195
    stmt_expr                      shift and go to state 86
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 88
    openStmt                       shift and go to state 196
    type                           shift and go to state 90
    assign                         shift and go to state 106
    block                          shift and go to state 107

state 218

    (54) closedStmt -> FOR ( placeholder11 ; . placeholder12 ; placeholder11 ) closedStmt
    (44) openStmt -> FOR ( placeholder11 ; . placeholder12 ; placeholder11 ) openStmt
    (57) placeholder12 -> . expr
    (58) placeholder12 -> . empty
    (81) expr -> . assign
    (82) expr -> . p1
    (112) empty -> .
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (88) p1 -> . p1 BOOL_OR p2
    (89) p1 -> . p2
    (77) lhs -> . field_access
    (90) p2 -> . p2 BOOL_AND p3
    (91) p2 -> . p3
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (92) p3 -> . p3 EQUAL p4
    (93) p3 -> . p3 NOT_EQUAL p4
    (94) p3 -> . p4
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (95) p4 -> . p4 < p5
    (96) p4 -> . p4 > p5
    (97) p4 -> . p4 LESS_THAN_OR_EQUAL p5
    (98) p4 -> . p4 GREATER_THAN_OR_EQUAL p5
    (99) p4 -> . p5
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (80) method_invocation -> . field_access ( placeholder14 )
    (100) p5 -> . p5 + p6
    (101) p5 -> . p5 - p6
    (102) p5 -> . p6
    (103) p6 -> . p6 * p7
    (104) p6 -> . p6 / p7
    (105) p6 -> . p7
    (106) p7 -> . ! p7
    (107) p7 -> . + p7
    (108) p7 -> . - p7
    (109) p7 -> . primary

    ;               reduce using rule 112 (empty -> .)
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97
    !               shift and go to state 108
    +               shift and go to state 109
    -               shift and go to state 110

    p2                             shift and go to state 118
    placeholder12                  shift and go to state 222
    p6                             shift and go to state 115
    p4                             shift and go to state 121
    field_access                   shift and go to state 112
    expr                           shift and go to state 123
    p5                             shift and go to state 122
    primary                        shift and go to state 113
    p3                             shift and go to state 119
    literal                        shift and go to state 87
    p1                             shift and go to state 114
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 111
    assign                         shift and go to state 125
    empty                          shift and go to state 124
    p7                             shift and go to state 117

state 219

    (52) closedStmt -> IF ( expr ) . closedStmt ELSE closedStmt
    (41) openStmt -> IF ( expr ) . stmt
    (42) openStmt -> IF ( expr ) . closedStmt ELSE openStmt
    (45) closedStmt -> . RETURN placeholder12 ;
    (46) closedStmt -> . stmt_expr ;
    (47) closedStmt -> . BREAK ;
    (48) closedStmt -> . CONTINUE ;
    (49) closedStmt -> . var_decl
    (50) closedStmt -> . ;
    (51) closedStmt -> . block
    (52) closedStmt -> . IF ( expr ) closedStmt ELSE closedStmt
    (53) closedStmt -> . WHILE ( expr ) closedStmt
    (54) closedStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (39) stmt -> . openStmt
    (40) stmt -> . closedStmt
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (18) var_decl -> . type variables
    (36) block -> . { placeholder9 }
    (41) openStmt -> . IF ( expr ) stmt
    (42) openStmt -> . IF ( expr ) closedStmt ELSE openStmt
    (43) openStmt -> . WHILE ( expr ) openStmt
    (44) openStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    RETURN          shift and go to state 73
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 101
    ;               shift and go to state 89
    IF              shift and go to state 203
    WHILE           shift and go to state 199
    FOR             shift and go to state 201
    {               shift and go to state 68
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 85
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    stmt                           shift and go to state 202
    closedStmt                     shift and go to state 223
    stmt_expr                      shift and go to state 86
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    var_decl                       shift and go to state 98
    method_invocation              shift and go to state 88
    openStmt                       shift and go to state 105
    type                           shift and go to state 90
    assign                         shift and go to state 106
    block                          shift and go to state 107

state 220

    (54) closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .

    ELSE            reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    IF              reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    WHILE           reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    FOR             reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    RETURN          reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    BREAK           reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    CONTINUE        reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    ;               reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    {               reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    PLUS_PLUS       reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    MINUS_MINUS     reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    INT             reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    FLOAT           reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    BOOLEAN         reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    ID              reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    THIS            reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    SUPER           reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    (               reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    NEW             reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    INT_CONST       reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    FLOAT_CONST     reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    STRING_CONST    reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    NULL            reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    TRUE            reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    FALSE           reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)
    }               reduce using rule 54 (closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt .)


state 221

    (44) openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .

    IF              reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    WHILE           reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    FOR             reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    RETURN          reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    BREAK           reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    CONTINUE        reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    ;               reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    {               reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    PLUS_PLUS       reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    MINUS_MINUS     reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    INT             reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    FLOAT           reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    BOOLEAN         reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    ID              reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    THIS            reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    SUPER           reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    (               reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    NEW             reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    INT_CONST       reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    FLOAT_CONST     reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    STRING_CONST    reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    NULL            reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    TRUE            reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    FALSE           reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)
    }               reduce using rule 44 (openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt .)


state 222

    (54) closedStmt -> FOR ( placeholder11 ; placeholder12 . ; placeholder11 ) closedStmt
    (44) openStmt -> FOR ( placeholder11 ; placeholder12 . ; placeholder11 ) openStmt

    ;               shift and go to state 224


state 223

    (52) closedStmt -> IF ( expr ) closedStmt . ELSE closedStmt
    (42) openStmt -> IF ( expr ) closedStmt . ELSE openStmt
    (40) stmt -> closedStmt .

    ELSE            shift and go to state 225
    IF              reduce using rule 40 (stmt -> closedStmt .)
    WHILE           reduce using rule 40 (stmt -> closedStmt .)
    FOR             reduce using rule 40 (stmt -> closedStmt .)
    RETURN          reduce using rule 40 (stmt -> closedStmt .)
    BREAK           reduce using rule 40 (stmt -> closedStmt .)
    CONTINUE        reduce using rule 40 (stmt -> closedStmt .)
    ;               reduce using rule 40 (stmt -> closedStmt .)
    {               reduce using rule 40 (stmt -> closedStmt .)
    PLUS_PLUS       reduce using rule 40 (stmt -> closedStmt .)
    MINUS_MINUS     reduce using rule 40 (stmt -> closedStmt .)
    INT             reduce using rule 40 (stmt -> closedStmt .)
    FLOAT           reduce using rule 40 (stmt -> closedStmt .)
    BOOLEAN         reduce using rule 40 (stmt -> closedStmt .)
    ID              reduce using rule 40 (stmt -> closedStmt .)
    THIS            reduce using rule 40 (stmt -> closedStmt .)
    SUPER           reduce using rule 40 (stmt -> closedStmt .)
    (               reduce using rule 40 (stmt -> closedStmt .)
    NEW             reduce using rule 40 (stmt -> closedStmt .)
    INT_CONST       reduce using rule 40 (stmt -> closedStmt .)
    FLOAT_CONST     reduce using rule 40 (stmt -> closedStmt .)
    STRING_CONST    reduce using rule 40 (stmt -> closedStmt .)
    NULL            reduce using rule 40 (stmt -> closedStmt .)
    TRUE            reduce using rule 40 (stmt -> closedStmt .)
    FALSE           reduce using rule 40 (stmt -> closedStmt .)
    }               reduce using rule 40 (stmt -> closedStmt .)


state 224

    (54) closedStmt -> FOR ( placeholder11 ; placeholder12 ; . placeholder11 ) closedStmt
    (44) openStmt -> FOR ( placeholder11 ; placeholder12 ; . placeholder11 ) openStmt
    (55) placeholder11 -> . stmt_expr
    (56) placeholder11 -> . empty
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (112) empty -> .
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    )               reduce using rule 112 (empty -> .)
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    ID              shift and go to state 116
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    placeholder11                  shift and go to state 226
    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    stmt_expr                      shift and go to state 169
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 88
    assign                         shift and go to state 106
    empty                          shift and go to state 171

state 225

    (52) closedStmt -> IF ( expr ) closedStmt ELSE . closedStmt
    (42) openStmt -> IF ( expr ) closedStmt ELSE . openStmt
    (45) closedStmt -> . RETURN placeholder12 ;
    (46) closedStmt -> . stmt_expr ;
    (47) closedStmt -> . BREAK ;
    (48) closedStmt -> . CONTINUE ;
    (49) closedStmt -> . var_decl
    (50) closedStmt -> . ;
    (51) closedStmt -> . block
    (52) closedStmt -> . IF ( expr ) closedStmt ELSE closedStmt
    (53) closedStmt -> . WHILE ( expr ) closedStmt
    (54) closedStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (41) openStmt -> . IF ( expr ) stmt
    (42) openStmt -> . IF ( expr ) closedStmt ELSE openStmt
    (43) openStmt -> . WHILE ( expr ) openStmt
    (44) openStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (18) var_decl -> . type variables
    (36) block -> . { placeholder9 }
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    RETURN          shift and go to state 73
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 101
    ;               shift and go to state 89
    IF              shift and go to state 203
    WHILE           shift and go to state 199
    FOR             shift and go to state 201
    {               shift and go to state 68
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 85
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    var_decl                       shift and go to state 98
    closedStmt                     shift and go to state 212
    stmt_expr                      shift and go to state 86
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 88
    openStmt                       shift and go to state 213
    type                           shift and go to state 90
    assign                         shift and go to state 106
    block                          shift and go to state 107

state 226

    (54) closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 . ) closedStmt
    (44) openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 . ) openStmt

    )               shift and go to state 227


state 227

    (54) closedStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) . closedStmt
    (44) openStmt -> FOR ( placeholder11 ; placeholder12 ; placeholder11 ) . openStmt
    (45) closedStmt -> . RETURN placeholder12 ;
    (46) closedStmt -> . stmt_expr ;
    (47) closedStmt -> . BREAK ;
    (48) closedStmt -> . CONTINUE ;
    (49) closedStmt -> . var_decl
    (50) closedStmt -> . ;
    (51) closedStmt -> . block
    (52) closedStmt -> . IF ( expr ) closedStmt ELSE closedStmt
    (53) closedStmt -> . WHILE ( expr ) closedStmt
    (54) closedStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) closedStmt
    (41) openStmt -> . IF ( expr ) stmt
    (42) openStmt -> . IF ( expr ) closedStmt ELSE openStmt
    (43) openStmt -> . WHILE ( expr ) openStmt
    (44) openStmt -> . FOR ( placeholder11 ; placeholder12 ; placeholder11 ) openStmt
    (110) stmt_expr -> . assign
    (111) stmt_expr -> . method_invocation
    (18) var_decl -> . type variables
    (36) block -> . { placeholder9 }
    (83) assign -> . lhs = expr
    (84) assign -> . lhs PLUS_PLUS
    (85) assign -> . PLUS_PLUS lhs
    (86) assign -> . lhs MINUS_MINUS
    (87) assign -> . MINUS_MINUS lhs
    (80) method_invocation -> . field_access ( placeholder14 )
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) type -> . BOOLEAN
    (22) type -> . ID
    (77) lhs -> . field_access
    (78) field_access -> . primary . ID
    (79) field_access -> . ID
    (65) primary -> . literal
    (66) primary -> . THIS
    (67) primary -> . SUPER
    (68) primary -> . ( expr )
    (69) primary -> . NEW ID ( placeholder14 )
    (70) primary -> . lhs
    (71) primary -> . method_invocation
    (59) literal -> . INT_CONST
    (60) literal -> . FLOAT_CONST
    (61) literal -> . STRING_CONST
    (62) literal -> . NULL
    (63) literal -> . TRUE
    (64) literal -> . FALSE

    RETURN          shift and go to state 73
    BREAK           shift and go to state 92
    CONTINUE        shift and go to state 101
    ;               shift and go to state 89
    IF              shift and go to state 203
    WHILE           shift and go to state 199
    FOR             shift and go to state 201
    {               shift and go to state 68
    PLUS_PLUS       shift and go to state 104
    MINUS_MINUS     shift and go to state 103
    INT             shift and go to state 30
    FLOAT           shift and go to state 28
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 85
    THIS            shift and go to state 100
    SUPER           shift and go to state 94
    (               shift and go to state 84
    NEW             shift and go to state 78
    INT_CONST       shift and go to state 82
    FLOAT_CONST     shift and go to state 77
    STRING_CONST    shift and go to state 80
    NULL            shift and go to state 83
    TRUE            shift and go to state 79
    FALSE           shift and go to state 97

    field_access                   shift and go to state 74
    primary                        shift and go to state 75
    var_decl                       shift and go to state 98
    closedStmt                     shift and go to state 220
    stmt_expr                      shift and go to state 86
    literal                        shift and go to state 87
    lhs                            shift and go to state 102
    method_invocation              shift and go to state 88
    openStmt                       shift and go to state 221
    type                           shift and go to state 90
    assign                         shift and go to state 106
    block                          shift and go to state 107
